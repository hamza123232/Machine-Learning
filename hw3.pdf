{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "# CS 584 :: Data Mining :: George Mason University :: Fall 2022\n",
    "\n",
    "\n",
    "# Homework 3: Clustering&Association Rule Mining\n",
    "\n",
    "- **100 points [9% of your final grade]**\n",
    "- **Due Friday, November 4 by 11:59pm**\n",
    "\n",
    "- *Goals of this homework:* (1) implement your K-means model; and (2) implement the association rule mining process with the Apriori algorithm.\n",
    "\n",
    "- *Submission instructions:* for this homework, you only need to submit to Blackboard. Please name your submission **FirstName_Lastname_hw3.ipynb**, so for example, my submission would be something like **Ziwei_Zhu_hw3.ipynb**. Your notebook should be fully executed so that we can see all outputs. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: notebook-as-pdf in c:\\users\\hamza durez\\miniconda3\\lib\\site-packages (0.5.0)\n",
      "Requirement already satisfied: pyppeteer in c:\\users\\hamza durez\\miniconda3\\lib\\site-packages (from notebook-as-pdf) (1.0.2)\n",
      "Requirement already satisfied: PyPDF2 in c:\\users\\hamza durez\\miniconda3\\lib\\site-packages (from notebook-as-pdf) (2.11.1)\n",
      "Requirement already satisfied: nbconvert in c:\\users\\hamza durez\\miniconda3\\lib\\site-packages (from notebook-as-pdf) (6.4.4)\n",
      "Requirement already satisfied: testpath in c:\\users\\hamza durez\\miniconda3\\lib\\site-packages (from nbconvert->notebook-as-pdf) (0.6.0)\n",
      "Requirement already satisfied: pandocfilters>=1.4.1 in c:\\users\\hamza durez\\miniconda3\\lib\\site-packages (from nbconvert->notebook-as-pdf) (1.5.0)\n",
      "Requirement already satisfied: jupyterlab-pygments in c:\\users\\hamza durez\\miniconda3\\lib\\site-packages (from nbconvert->notebook-as-pdf) (0.1.2)\n",
      "Requirement already satisfied: jupyter-core in c:\\users\\hamza durez\\miniconda3\\lib\\site-packages (from nbconvert->notebook-as-pdf) (4.11.1)\n",
      "Requirement already satisfied: bleach in c:\\users\\hamza durez\\miniconda3\\lib\\site-packages (from nbconvert->notebook-as-pdf) (4.1.0)\n",
      "Requirement already satisfied: nbclient<0.6.0,>=0.5.0 in c:\\users\\hamza durez\\miniconda3\\lib\\site-packages (from nbconvert->notebook-as-pdf) (0.5.13)\n",
      "Requirement already satisfied: traitlets>=5.0 in c:\\users\\hamza durez\\miniconda3\\lib\\site-packages (from nbconvert->notebook-as-pdf) (5.1.1)\n",
      "Requirement already satisfied: jinja2>=2.4 in c:\\users\\hamza durez\\miniconda3\\lib\\site-packages (from nbconvert->notebook-as-pdf) (3.1.2)\n",
      "Requirement already satisfied: pygments>=2.4.1 in c:\\users\\hamza durez\\miniconda3\\lib\\site-packages (from nbconvert->notebook-as-pdf) (2.11.2)\n",
      "Requirement already satisfied: mistune<2,>=0.8.1 in c:\\users\\hamza durez\\miniconda3\\lib\\site-packages (from nbconvert->notebook-as-pdf) (0.8.4)\n",
      "Requirement already satisfied: nbformat>=4.4 in c:\\users\\hamza durez\\miniconda3\\lib\\site-packages (from nbconvert->notebook-as-pdf) (5.5.0)\n",
      "Requirement already satisfied: entrypoints>=0.2.2 in c:\\users\\hamza durez\\miniconda3\\lib\\site-packages (from nbconvert->notebook-as-pdf) (0.4)\n",
      "Requirement already satisfied: beautifulsoup4 in c:\\users\\hamza durez\\miniconda3\\lib\\site-packages (from nbconvert->notebook-as-pdf) (4.11.1)\n",
      "Requirement already satisfied: defusedxml in c:\\users\\hamza durez\\miniconda3\\lib\\site-packages (from nbconvert->notebook-as-pdf) (0.7.1)\n",
      "Requirement already satisfied: appdirs<2.0.0,>=1.4.3 in c:\\users\\hamza durez\\miniconda3\\lib\\site-packages (from pyppeteer->notebook-as-pdf) (1.4.4)\n",
      "Requirement already satisfied: tqdm<5.0.0,>=4.42.1 in c:\\users\\hamza durez\\miniconda3\\lib\\site-packages (from pyppeteer->notebook-as-pdf) (4.64.1)\n",
      "Requirement already satisfied: importlib-metadata>=1.4 in c:\\users\\hamza durez\\miniconda3\\lib\\site-packages (from pyppeteer->notebook-as-pdf) (4.11.3)\n",
      "Requirement already satisfied: pyee<9.0.0,>=8.1.0 in c:\\users\\hamza durez\\miniconda3\\lib\\site-packages (from pyppeteer->notebook-as-pdf) (8.2.2)\n",
      "Requirement already satisfied: urllib3<2.0.0,>=1.25.8 in c:\\users\\hamza durez\\miniconda3\\lib\\site-packages (from pyppeteer->notebook-as-pdf) (1.26.12)\n",
      "Requirement already satisfied: websockets<11.0,>=10.0 in c:\\users\\hamza durez\\miniconda3\\lib\\site-packages (from pyppeteer->notebook-as-pdf) (10.4)\n",
      "Requirement already satisfied: certifi>=2021 in c:\\users\\hamza durez\\miniconda3\\lib\\site-packages (from pyppeteer->notebook-as-pdf) (2022.9.24)\n",
      "Requirement already satisfied: zipp>=0.5 in c:\\users\\hamza durez\\miniconda3\\lib\\site-packages (from importlib-metadata>=1.4->pyppeteer->notebook-as-pdf) (3.8.0)\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in c:\\users\\hamza durez\\miniconda3\\lib\\site-packages (from jinja2>=2.4->nbconvert->notebook-as-pdf) (2.1.1)\n",
      "Requirement already satisfied: nest-asyncio in c:\\users\\hamza durez\\miniconda3\\lib\\site-packages (from nbclient<0.6.0,>=0.5.0->nbconvert->notebook-as-pdf) (1.5.5)\n",
      "Requirement already satisfied: jupyter-client>=6.1.5 in c:\\users\\hamza durez\\miniconda3\\lib\\site-packages (from nbclient<0.6.0,>=0.5.0->nbconvert->notebook-as-pdf) (7.3.5)\n",
      "Requirement already satisfied: fastjsonschema in c:\\users\\hamza durez\\miniconda3\\lib\\site-packages (from nbformat>=4.4->nbconvert->notebook-as-pdf) (2.16.2)\n",
      "Requirement already satisfied: jsonschema>=2.6 in c:\\users\\hamza durez\\miniconda3\\lib\\site-packages (from nbformat>=4.4->nbconvert->notebook-as-pdf) (4.16.0)\n",
      "Requirement already satisfied: colorama in c:\\users\\hamza durez\\miniconda3\\lib\\site-packages (from tqdm<5.0.0,>=4.42.1->pyppeteer->notebook-as-pdf) (0.4.5)\n",
      "Requirement already satisfied: soupsieve>1.2 in c:\\users\\hamza durez\\miniconda3\\lib\\site-packages (from beautifulsoup4->nbconvert->notebook-as-pdf) (2.3.2.post1)\n",
      "Requirement already satisfied: six>=1.9.0 in c:\\users\\hamza durez\\miniconda3\\lib\\site-packages (from bleach->nbconvert->notebook-as-pdf) (1.16.0)\n",
      "Requirement already satisfied: packaging in c:\\users\\hamza durez\\miniconda3\\lib\\site-packages (from bleach->nbconvert->notebook-as-pdf) (21.3)\n",
      "Requirement already satisfied: webencodings in c:\\users\\hamza durez\\miniconda3\\lib\\site-packages (from bleach->nbconvert->notebook-as-pdf) (0.5.1)\n",
      "Requirement already satisfied: pywin32>=1.0 in c:\\users\\hamza durez\\miniconda3\\lib\\site-packages (from jupyter-core->nbconvert->notebook-as-pdf) (302)\n",
      "Requirement already satisfied: attrs>=17.4.0 in c:\\users\\hamza durez\\miniconda3\\lib\\site-packages (from jsonschema>=2.6->nbformat>=4.4->nbconvert->notebook-as-pdf) (21.4.0)\n",
      "Requirement already satisfied: pyrsistent!=0.17.0,!=0.17.1,!=0.17.2,>=0.14.0 in c:\\users\\hamza durez\\miniconda3\\lib\\site-packages (from jsonschema>=2.6->nbformat>=4.4->nbconvert->notebook-as-pdf) (0.18.0)\n",
      "Requirement already satisfied: pyzmq>=23.0 in c:\\users\\hamza durez\\miniconda3\\lib\\site-packages (from jupyter-client>=6.1.5->nbclient<0.6.0,>=0.5.0->nbconvert->notebook-as-pdf) (23.2.0)\n",
      "Requirement already satisfied: tornado>=6.2 in c:\\users\\hamza durez\\miniconda3\\lib\\site-packages (from jupyter-client>=6.1.5->nbclient<0.6.0,>=0.5.0->nbconvert->notebook-as-pdf) (6.2)\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in c:\\users\\hamza durez\\miniconda3\\lib\\site-packages (from jupyter-client>=6.1.5->nbclient<0.6.0,>=0.5.0->nbconvert->notebook-as-pdf) (2.8.2)\n",
      "Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in c:\\users\\hamza durez\\miniconda3\\lib\\site-packages (from packaging->bleach->nbconvert->notebook-as-pdf) (3.0.9)\n"
     ]
    }
   ],
   "source": [
    "!pip install -U notebook-as-pdf"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "## Part 1: Clustering (50 points)\n",
    "\n",
    "In this part, you will implement your own K-means algorithm to conduct clustering on handwritten digit images. In this homework, we will still use the handwritten digit image dataset we have already used in previous homework. However, since clustering is unsupervised learning, which means we do not have the label information. So, here, we will only use the testing data stored in the \"test.txt\" file.\n",
    "\n",
    "First, let's load the data by excuting the following code:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "array of testing feature matrix: shape (10000, 784)\n",
      "array of testing label matrix: shape (10000,)\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "test = np.loadtxt(\"test.txt\", delimiter=',')\n",
    "test_features = test[:, 1:]\n",
    "test_labels = test[:, 0]\n",
    "\n",
    "print('array of testing feature matrix: shape ' + str(np.shape(test_features)))\n",
    "print('array of testing label matrix: shape ' + str(np.shape(test_labels)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "Now, it's time for you to implement your own K-means algorithm. First, please write your code to build your K-means model using the image data with **K = 10**, and **Euclidean distance**.\n",
    "\n",
    "**Note: You should implement the algorithm by yourself. You are NOT allowed to use Machine Learning libraries like Sklearn**\n",
    "\n",
    "**Note: you need to decide when to stop the model training process.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "pycharm": {
     "is_executing": true,
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "test feature size: 7840000\n",
      "test feature shape: (10000, 784)\n",
      "test features dimesion: 2\n"
     ]
    }
   ],
   "source": [
    "# K-means implementation from scratch\n",
    "print(\"test feature size:\",test_features.size) # checking the size of features\n",
    "print(\"test feature shape:\",test_features.shape)\n",
    "print(\"test features dimesion:\",test_features.ndim) # Checking the dimesion of the fetures\n",
    "\n",
    "# seting the dimesion of features to equal size of feaures and labels\n",
    "flattened_features = test_features.flatten()\n",
    "flattened_features\n",
    "rl = flattened_features.ravel()\n",
    "rl.shape\n",
    "\n",
    "#kmean algorithm\n",
    "import sklearn\n",
    "import plotly.express as px\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "class KMeansClustering:\n",
    "    def __init__(self, X, num_clusters):\n",
    "        self.K = num_clusters # cluster number\n",
    "        self.max_iterations = 100 # max iteration. don't want to run inf time\n",
    "        self.num_examples, self.num_features = X.shape # num of examples, num of features\n",
    "        self.plot_figure = True # plot figure\n",
    "\n",
    "    # randomly initialize centroids\n",
    "    def initialize_random_centroids(self, X):\n",
    "        centroids = np.zeros((self.K, self.num_features)) # row , column full with zero\n",
    "        for k in range(self.K): # iterations of\n",
    "            centroid = X[np.random.choice(range(self.num_examples))] # random centroids\n",
    "            centroids[k] = centroid\n",
    "        return centroids # return random centroids\n",
    "    # new centroids\n",
    "    def calculate_new_centroids(self, cluster, X):\n",
    "        centroids = np.zeros((self.K, self.num_features)) # row , column full with zero\n",
    "        for idx, cluster in enumerate(cluster):\n",
    "            new_centroid = np.mean(X[cluster], axis=0) # find the value for new centroids\n",
    "            centroids[idx] = new_centroid\n",
    "            #print(centroids[idx])\n",
    "        return centroids\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "    # prediction\n",
    "    def predict_cluster(self, clusters, X):\n",
    "        global y_pred\n",
    "        y_pred = np.zeros(self.num_examples) # row1 fillup with zero\n",
    "        for cluster_idx, cluster in enumerate(clusters):\n",
    "            for sample_idx in cluster:\n",
    "                y_pred[sample_idx] = cluster_idx\n",
    "        return y_pred\n",
    "    # create cluster Function\n",
    "    def create_cluster(self, X, centroids):\n",
    "        clusters = [[] for _ in range(self.K)]\n",
    "        for point_idx, point in enumerate(X):\n",
    "            closest_centroid = np.argmin(\n",
    "                np.sqrt(np.sum((point-centroids)**2, axis=1))\n",
    "            ) # closest centroid using eucledian distance equation(calculate distance of every point from centroid)\n",
    "            clusters[closest_centroid].append(point_idx)\n",
    "        #print(\"cluster line 27:\",clusters)\n",
    "        return clusters\n",
    "    # plotinng scatter plot\n",
    "    def plot_fig(self, X, y):\n",
    "        fig = px.scatter(X[:, 0],y_pred , color=y)\n",
    "        fig.show() # visualize\n",
    "\n",
    "    # fit data\n",
    "    def fit(self, X):\n",
    "        centroids = self.initialize_random_centroids(X) # initialize random centroids\n",
    "        for _ in range(self.max_iterations):\n",
    "            clusters = self.create_cluster(X, centroids) # create cluster\n",
    "            previous_centroids = centroids\n",
    "            centroids = self.calculate_new_centroids(clusters, X) # calculate new centroids\n",
    "            #print(\"centroids line 59\",centroids)\n",
    "            diff = centroids - previous_centroids # calculate difference\n",
    "            #print(\"centroids difference:\",diff)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "            if not diff.any():\n",
    "                break\n",
    "        y_pred = self.predict_cluster(clusters, X) # predict function\n",
    "        if self.plot_figure: # if true\n",
    "            self.plot_fig(X, y_pred) # plot function\n",
    "        from sklearn.metrics import mean_squared_error\n",
    "        print(\"Mean Squared Error\",mean_squared_error(test_labels, y_pred).sum())\n",
    "        #mse2 = np.power(test_labels,y_pred,2).mean()\n",
    "        #mse= (np.mean(X[:,0],y_pred))**2\n",
    "        #print(\"mean Squared error manually:\",mse)\n",
    "        return y_pred\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "        np.random.seed(10)\n",
    "        num_clusters = 10 # num of cluster\n",
    "        X = test # using dataset from test.txt\n",
    "        Kmeans = KMeansClustering(X, num_clusters)\n",
    "        y_pred = Kmeans.fit(X)\n",
    "\n",
    "        print(\"prediction\",y_pred.astype(int))\n",
    "\n",
    "\n",
    "        var_store = {\n",
    "            'prediction':'y_pred',\n",
    "\n",
    "            }\n",
    "        %store var_store\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "Next, you need to calculate the Sum of Squared Error (SSE) of each cluster generated by your K-means algorithm. Then, print out the averaged SSE of your algorithm."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sum Of Squared Error:  76410.71099510507\n"
     ]
    }
   ],
   "source": [
    "# Write your code here\n",
    "import statsmodels.api as sm\n",
    "\n",
    "x=y_pred\n",
    "y= X[:,0]\n",
    "\n",
    "#add constant to predictor variables\n",
    "x = sm.add_constant(x)\n",
    "\n",
    "#fit linear regression model\n",
    "model = sm.OLS(y, x).fit()\n",
    "\n",
    "import numpy as np\n",
    "sse = np.sum((model.fittedvalues - y)**2)\n",
    "print('Sum Of Squared Error: ', sse)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "Then, please have a look on https://scikit-learn.org/stable/modules/generated/sklearn.metrics.homogeneity_completeness_v_measure.html#sklearn.metrics.homogeneity_completeness_v_measure, and use this function to print out the homogeneity, completeness, and v-measure of your K-means model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "homogenity is: 0.4999911479619104\n",
      "completeness is: 0.5036925379325861\n",
      "v_masure is: 0.5018350179445569\n"
     ]
    }
   ],
   "source": [
    "# Write your code here\n",
    "homogenity,completeness,v_masure = sklearn.metrics.homogeneity_completeness_v_measure(test_labels, y_pred, beta=1.0, )\n",
    "print(\"homogenity is:\",homogenity)\n",
    "print(\"completeness is:\",completeness)\n",
    "print(\"v_masure is:\",v_masure)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "Ok, now you already have a good model. But can you further improve it? In the next cell, please implement the K-means++ model introduced in the lecture."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data is: [[7. 5. 2. ... 7. 7. 9.]\n",
      " [7. 2. 1. ... 4. 5. 6.]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Centroids are: [array([7., 5., 2., ..., 7., 7., 9.]), array([7., 2., 1., ..., 4., 5., 6.]), array([7., 5., 2., ..., 7., 7., 9.]), array([7., 5., 2., ..., 7., 7., 9.]), array([7., 5., 2., ..., 7., 7., 9.]), array([7., 5., 2., ..., 7., 7., 9.]), array([7., 5., 2., ..., 7., 7., 9.]), array([7., 5., 2., ..., 7., 7., 9.]), array([7., 5., 2., ..., 7., 7., 9.]), array([7., 5., 2., ..., 7., 7., 9.])]\n"
     ]
    }
   ],
   "source": [
    "# Implementing the Kmean++\n",
    "# importing dependencies\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import sys\n",
    "\n",
    "# creating data\n",
    "\n",
    "\n",
    "data = np.vstack((X[:,0],y_pred))\n",
    "np.random.shuffle(data)\n",
    "print(\"Data is:\",data)\n",
    "\n",
    "# function to plot the selected centroids\n",
    "def plot(data, centroids):\n",
    "    plt.scatter(data[:, 0], data[:, 1], marker = '.',\n",
    "                color = 'gray', label = 'data points')\n",
    "    plt.scatter(centroids[:-1, 0], centroids[:-1, 1],\n",
    "                color = 'black', label = 'previously selected centroids')\n",
    "    plt.scatter(centroids[-1, 0], centroids[-1, 1],\n",
    "                color = 'red', label = 'next centroid')\n",
    "    plt.title('Select % d th centroid'%(centroids.shape[0]))\n",
    "\n",
    "    plt.legend()\n",
    "    plt.xlim(-5, 12)\n",
    "    plt.ylim(-10, 15)\n",
    "    plt.show()\n",
    "\n",
    "# function to compute euclidean distance\n",
    "def distance(p1, p2):\n",
    "    return np.sum((p1 - p2)**2)\n",
    "\n",
    "# initialization algorithm\n",
    "def initialize(data, k):\n",
    "    '''\n",
    "    initialized the centroids for K-means++\n",
    "    inputs:\n",
    "        data - numpy array of data points having shape (200, 2)\n",
    "        k - number of clusters\n",
    "    '''\n",
    "    ## initialize the centroids list and add\n",
    "    ## a randomly selected data point to the list\n",
    "    centroids = []\n",
    "    centroids.append(data[np.random.randint(\n",
    "            data.shape[0]), :])\n",
    "    plot(data, np.array(centroids))\n",
    "\n",
    "    ## compute remaining k - 1 centroids\n",
    "    for c_id in range(k - 1):\n",
    "\n",
    "        ## initialize a list to store distances of data\n",
    "        ## points from nearest centroid\n",
    "        dist = []\n",
    "        for i in range(data.shape[0]):\n",
    "            point = data[i, :]\n",
    "            d = sys.maxsize\n",
    "\n",
    "            ## compute distance of 'point' from each of the previously\n",
    "            ## selected centroid and store the minimum distance\n",
    "            for j in range(len(centroids)):\n",
    "                temp_dist = distance(point, centroids[j])\n",
    "                d = min(d, temp_dist)\n",
    "            dist.append(d)\n",
    "\n",
    "        ## select data point with maximum distance as our next centroid\n",
    "        dist = np.array(dist)\n",
    "        next_centroid = data[np.argmax(dist), :]\n",
    "        centroids.append(next_centroid)\n",
    "        dist = []\n",
    "        plot(data, np.array(centroids))\n",
    "    return centroids\n",
    "\n",
    "# call the initialize function to get the centroids\n",
    "centroids = initialize(data, k = 10)\n",
    "print(\"Centroids are:\",centroids)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "In the next cell, use sklearn.metrics.homogeneity_completeness_v_measure() to print out the homogeneity, completeness, and v-measure of your K-means++ model."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "homogenity is: 0.4999911479619104\n",
      "completeness is: 0.5036925379325861\n",
      "v_masure is: 0.5030718385910475\n"
     ]
    }
   ],
   "source": [
    "# Write your code\n",
    "hehomogenity,completeness,v_masure = sklearn.metrics.homogeneity_completeness_v_measure(test_labels, y_pred, beta=5.0, )\n",
    "print(\"homogenity is:\",homogenity)\n",
    "print(\"completeness is:\",completeness)\n",
    "print(\"v_masure is:\",v_masure)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "### Question: Comparing the results by K-means and K-means++, do you see significant improvement? Write down in the next cell what do you think are the reasons for observing the improvement or not observing the improve."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "#### Kmeans algorithm is staright forward for the clustering of datasets and its calcultes the centroids according to the mean and create cluster and these values to its corresponding cluster. In the above implemented algorithm the Value of K=10 and on the basis of eculedian distance from the clusters elements are grouped together and algorithms homogenity, completeness and v_measureing are performing average. For the Kmean++ improves the drawback of the kmean and and selects the initiale values randomly and then on the bases of best intitialization creates clusters and calculates centroids. and repeat these steps until k reaches the best. and performing good in our case"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "## Part 2: Association Rule Mining (50 points)\n",
    "\n",
    "In this part, you are going to examine movies using our understanding of association rules. For this part, you need to implement the apriori algorithm, and apply it to a movie rating dataset to find association rules of user-rate-movie behaviors. First, run the next cell to load the dataset we are going to use."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "array of user-movie matrix: shape (11743, 2)\n"
     ]
    }
   ],
   "source": [
    "user_movie_data = np.loadtxt(\"movie_rated.txt\", delimiter=',')\n",
    "print('array of user-movie matrix: shape ' + str(np.shape(user_movie_data)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "\n",
    "\n",
    "In this dataset, there are two columns: the first column is the integer ids of users, and the second column is the integer ids of movies. Each row denotes that the user of given user id rated the movie of the given movie id. We are going to treat each user as a transaction, so you will need to collect all the movies that have been rated by a single user as a transaction."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "Now, you need to implement the apriori algorithm and apply it to this dataset to find association rules of user rating behaviors with **minimum support of 0.2** and **minimum confidence of 0.8**. We know there are many existing implementations of apriori online (check github for some good starting points). You are welcome to read existing codebases and let that inform your approach. \n",
    "\n",
    "**Note: Do not copy-paste any existing code.**\n",
    "\n",
    "**Note: We want your code to have sufficient comments to explain your steps, to show us that you really know what you are doing.**\n",
    "\n",
    "**Note: You should add print statements to print out the intermediate steps of your method -- e.g., the size of the candidate set at each step of the method, the size of the filtered set, and any other important information you think will highlight the method.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1.0, 2160.0, 2312.0, 144.0, 480.0, 2.0, 1221.0, 2890.0, 1228.0, 3.0, 1270.0, 4.0, 1265.0, 1197.0, 830.0, 1625.0, 2501.0, 260.0, 1961.0, 527.0, 474.0, 2020.0, 2028.0, 5.0, 2153.0, 1556.0, 1722.0, 208.0, 1687.0, 1831.0, 1792.0, 198.0, 2826.0, 292.0, 2002.0, 533.0, 95.0, 6.0, 1449.0, 7.0, 2987.0, 1188.0, 728.0, 2067.0, 665.0, 2076.0, 1357.0, 1366.0, 764.0, 766.0, 2171.0, 846.0, 783.0, 858.0, 3067.0, 3211.0, 100.0, 1584.0, 994.0, 1673.0, 1684.0, 1900.0, 159.0, 2710.0, 2575.0, 306.0, 163.0, 175.0, 11.0, 265.0, 1952.0, 41.0, 1203.0, 1204.0, 1217.0, 1224.0, 627.0, 1094.0, 8.0, 1254.0, 906.0, 1942.0, 2940.0, 9.0, 2053.0, 1797.0, 10.0, 2990.0, 1252.0, 1256.0, 587.0, 3007.0, 1344.0, 1293.0, 1513.0, 2245.0, 1387.0, 2352.0, 1480.0, 1488.0, 1635.0, 3255.0, 1653.0, 3189.0, 1663.0, 998.0, 3274.0, 2706.0, 1772.0, 170.0, 249.0, 346.0, 1101.0, 363.0, 1112.0, 377.0, 1127.0, 2795.0, 2883.0, 2893.0, 482.0, 1237.0, 707.0, 2070.0, 2485.0, 2581.0, 12.0, 1268.0, 2097.0, 1297.0, 2474.0, 141.0, 1015.0, 282.0, 1032.0, 1035.0, 2005.0, 538.0, 2010.0, 1084.0, 492.0, 13.0, 803.0, 2071.0, 1535.0, 1399.0, 2276.0, 2502.0, 2435.0, 3186.0, 1733.0, 205.0, 2702.0, 2583.0, 2679.0, 269.0, 271.0, 1043.0, 1119.0, 57.0, 1054.0, 388.0, 1147.0, 14.0, 1739.0, 15.0, 2087.0, 3050.0, 885.0, 1672.0, 1848.0, 1862.0, 2596.0, 26.0, 16.0, 3061.0, 3259.0, 1947.0, 17.0, 210.0, 383.0, 18.0, 2134.0, 3014.0, 1359.0, 2161.0, 2249.0, 1378.0, 2409.0, 3070.0, 3243.0, 3248.0, 2378.0, 2450.0, 2393.0, 3198.0, 2476.0, 151.0, 1017.0, 1019.0, 2021.0, 2116.0, 2043.0, 2118.0, 19.0, 1348.0, 20.0, 1593.0, 2701.0, 305.0, 21.0, 22.0, 2142.0, 343.0, 361.0, 484.0, 23.0, 3011.0, 3037.0, 949.0, 3152.0, 3244.0, 2633.0, 2662.0, 2926.0, 2863.0, 24.0, 2143.0, 2162.0, 837.0, 2184.0, 927.0, 2413.0, 950.0, 1490.0, 102.0, 2558.0, 2719.0, 2574.0, 1875.0, 429.0, 1046.0, 1996.0, 470.0, 473.0, 88.0, 558.0, 25.0, 596.0, 3028.0, 27.0, 1750.0, 2009.0, 2882.0, 28.0, 29.0, 3217.0, 1972.0, 30.0, 2924.0, 31.0, 32.0, 2330.0, 33.0, 34.0, 1261.0, 35.0, 36.0, 2060.0, 3261.0, 2884.0, 2381.0, 2382.0, 69.0, 37.0, 411.0, 511.0, 38.0, 2098.0, 1837.0, 1713.0, 87.0, 39.0, 3013.0, 911.0, 782.0, 3208.0, 1483.0, 1689.0, 1693.0, 229.0, 240.0, 1866.0, 259.0, 2844.0, 451.0, 1130.0, 2898.0, 809.0, 103.0, 135.0, 2586.0, 1946.0, 1975.0, 360.0, 1991.0, 528.0, 387.0, 390.0, 540.0, 544.0, 92.0, 1241.0, 40.0, 2654.0, 1194.0, 3139.0, 3153.0, 42.0, 1162.0, 43.0, 44.0, 45.0, 3051.0, 2499.0, 46.0, 3235.0, 1163.0, 1558.0, 1565.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 2203.0, 2073.0, 53.0, 54.0, 1131.0, 2357.0, 2757.0, 55.0, 896.0, 1058.0, 56.0, 1974.0, 58.0, 59.0, 60.0, 3063.0, 61.0, 1758.0, 62.0, 2365.0, 63.0, 1431.0, 2298.0, 2540.0, 1752.0, 64.0, 1983.0, 65.0, 2325.0, 66.0, 973.0, 67.0, 1495.0, 2102.0, 2195.0, 2786.0, 93.0, 68.0, 70.0, 71.0, 2367.0, 72.0, 1326.0, 2740.0, 73.0, 74.0, 75.0, 76.0, 148.0, 77.0, 78.0, 3069.0, 792.0, 2848.0, 1305.0, 3111.0, 850.0, 2537.0, 1999.0, 2970.0, 79.0, 2849.0, 603.0, 80.0, 81.0, 82.0, 695.0, 83.0, 84.0, 85.0, 615.0, 86.0, 2741.0, 2192.0, 89.0, 90.0, 91.0, 94.0, 96.0, 97.0, 2287.0, 1631.0, 3093.0, 2483.0, 1138.0, 1152.0, 2307.0, 2503.0, 2554.0, 2705.0, 2923.0, 98.0, 2212.0, 2283.0, 970.0, 1662.0, 1880.0, 1116.0, 472.0, 1351.0, 862.0, 149.0, 1767.0, 501.0, 513.0, 1236.0, 99.0, 101.0, 718.0, 3079.0, 3221.0, 2810.0, 2670.0, 2862.0, 3109.0, 2737.0, 2932.0, 104.0, 105.0, 2653.0, 106.0, 107.0, 1337.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 3142.0, 2377.0, 115.0, 116.0, 117.0, 118.0, 1612.0, 656.0, 2045.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 1646.0, 127.0, 128.0, 129.0, 130.0, 131.0, 132.0, 133.0, 134.0, 2188.0, 136.0, 137.0, 138.0, 139.0, 140.0, 142.0, 143.0, 145.0, 2669.0, 3143.0, 2743.0, 146.0, 147.0, 150.0, 152.0, 153.0, 154.0, 155.0, 568.0, 156.0, 157.0, 158.0, 160.0, 161.0, 162.0, 164.0, 888.0, 165.0, 166.0, 167.0, 168.0, 169.0, 2246.0, 1925.0, 171.0, 172.0, 173.0, 174.0, 867.0, 176.0, 177.0, 178.0, 179.0, 180.0, 181.0, 182.0, 183.0, 184.0, 185.0, 186.0, 187.0, 1943.0, 188.0, 189.0, 190.0, 191.0, 192.0, 193.0, 194.0, 195.0, 1341.0, 196.0, 197.0, 199.0, 200.0, 201.0, 202.0, 203.0, 204.0, 206.0, 207.0, 209.0, 211.0, 1744.0, 212.0, 213.0, 214.0, 215.0, 216.0, 217.0, 218.0, 219.0, 220.0, 221.0, 222.0, 223.0, 224.0, 225.0, 226.0, 227.0, 228.0, 230.0, 231.0, 232.0, 233.0, 234.0, 235.0, 236.0, 237.0, 238.0, 239.0, 241.0, 242.0, 243.0, 244.0, 245.0, 246.0, 247.0, 2284.0, 248.0, 250.0, 251.0, 252.0, 253.0, 254.0, 255.0, 256.0, 257.0, 565.0, 258.0, 261.0, 262.0, 263.0, 972.0, 3171.0, 264.0, 266.0, 267.0, 268.0, 270.0, 272.0, 309.0, 273.0, 274.0, 275.0, 276.0, 277.0, 278.0, 279.0, 280.0, 281.0, 283.0, 284.0, 460.0, 285.0, 286.0, 287.0, 288.0, 289.0, 290.0, 291.0, 293.0, 294.0, 295.0, 296.0, 297.0, 298.0, 1496.0, 299.0, 300.0, 301.0, 302.0, 303.0, 304.0, 567.0, 307.0, 308.0, 310.0, 311.0, 312.0, 313.0, 314.0, 315.0, 316.0, 317.0, 318.0, 811.0, 319.0, 320.0, 321.0, 322.0, 323.0, 324.0, 325.0, 326.0, 327.0, 328.0, 329.0, 330.0, 331.0, 1426.0, 332.0, 333.0, 334.0, 335.0, 336.0, 337.0, 338.0, 339.0, 340.0, 341.0, 342.0, 344.0, 345.0, 347.0, 348.0, 349.0, 350.0, 351.0, 352.0, 353.0, 354.0, 355.0, 356.0, 357.0, 358.0, 359.0, 362.0, 364.0, 365.0, 366.0, 367.0, 368.0, 369.0, 2200.0, 370.0, 371.0, 372.0, 373.0, 374.0, 375.0, 376.0, 378.0, 379.0, 380.0, 381.0, 382.0, 384.0, 385.0, 386.0, 389.0, 391.0, 392.0, 393.0, 394.0, 395.0, 396.0, 397.0, 398.0, 399.0, 400.0, 401.0, 402.0, 403.0, 404.0, 405.0, 406.0, 407.0, 408.0, 409.0, 410.0, 412.0, 413.0, 414.0, 415.0, 416.0, 417.0, 418.0, 1539.0, 419.0, 420.0, 421.0, 422.0, 423.0, 424.0, 425.0, 426.0, 427.0, 428.0, 430.0, 431.0, 432.0, 433.0, 434.0, 435.0, 436.0, 437.0, 438.0, 439.0, 440.0, 441.0, 442.0, 443.0, 1514.0, 444.0, 445.0, 446.0, 447.0, 448.0, 449.0, 2579.0, 450.0, 452.0, 453.0, 454.0, 455.0, 456.0, 457.0, 458.0, 459.0, 461.0, 462.0, 463.0, 1898.0, 464.0, 2821.0, 465.0, 466.0, 467.0, 468.0, 633.0, 469.0, 618.0, 471.0, 475.0, 476.0, 477.0, 478.0, 479.0, 481.0, 483.0, 485.0, 486.0, 487.0, 488.0, 489.0, 490.0, 491.0, 2157.0, 493.0, 494.0]\n",
      "m1:\n",
      "[1.0]: 4\n",
      "[2160.0]: 66\n",
      "[2312.0]: 33\n",
      "[144.0]: 56\n",
      "[480.0]: 209\n",
      "[2.0]: 5\n",
      "[1221.0]: 139\n",
      "[2890.0]: 88\n",
      "[1228.0]: 58\n",
      "[3.0]: 1\n",
      "[1270.0]: 216\n",
      "[4.0]: 12\n",
      "[1265.0]: 203\n",
      "[1197.0]: 196\n",
      "[830.0]: 25\n",
      "[1625.0]: 85\n",
      "[2501.0]: 44\n",
      "[260.0]: 248\n",
      "[1961.0]: 121\n",
      "[527.0]: 211\n",
      "[474.0]: 137\n",
      "[2020.0]: 72\n",
      "[2028.0]: 227\n",
      "[5.0]: 48\n",
      "[2153.0]: 29\n",
      "[1556.0]: 36\n",
      "[1722.0]: 79\n",
      "[208.0]: 122\n",
      "[1687.0]: 29\n",
      "[1831.0]: 70\n",
      "[1792.0]: 35\n",
      "[198.0]: 62\n",
      "[2826.0]: 63\n",
      "[292.0]: 155\n",
      "[2002.0]: 75\n",
      "[533.0]: 18\n",
      "[95.0]: 63\n",
      "[6.0]: 4\n",
      "[1449.0]: 29\n",
      "[7.0]: 49\n",
      "[2987.0]: 163\n",
      "[1188.0]: 62\n",
      "[728.0]: 15\n",
      "[2067.0]: 43\n",
      "[665.0]: 6\n",
      "[2076.0]: 56\n",
      "[1357.0]: 49\n",
      "[1366.0]: 13\n",
      "[764.0]: 4\n",
      "[766.0]: 12\n",
      "[2171.0]: 22\n",
      "[846.0]: 4\n",
      "[783.0]: 40\n",
      "[858.0]: 190\n",
      "[3067.0]: 40\n",
      "[3211.0]: 4\n",
      "[100.0]: 10\n",
      "[1584.0]: 118\n",
      "[994.0]: 46\n",
      "[1673.0]: 93\n",
      "[1684.0]: 4\n",
      "[1900.0]: 7\n",
      "[159.0]: 29\n",
      "[2710.0]: 108\n",
      "[2575.0]: 10\n",
      "[306.0]: 71\n",
      "[163.0]: 62\n",
      "[175.0]: 53\n",
      "[11.0]: 105\n",
      "[265.0]: 81\n",
      "[1952.0]: 66\n",
      "[41.0]: 47\n",
      "[1203.0]: 48\n",
      "[1204.0]: 74\n",
      "[1217.0]: 37\n",
      "[1224.0]: 44\n",
      "[627.0]: 9\n",
      "[1094.0]: 104\n",
      "[8.0]: 9\n",
      "[1254.0]: 34\n",
      "[906.0]: 21\n",
      "[1942.0]: 13\n",
      "[2940.0]: 16\n",
      "[9.0]: 6\n",
      "[2053.0]: 37\n",
      "[1797.0]: 22\n",
      "[10.0]: 72\n",
      "[2990.0]: 34\n",
      "[1252.0]: 101\n",
      "[1256.0]: 63\n",
      "[587.0]: 99\n",
      "[3007.0]: 32\n",
      "[1344.0]: 40\n",
      "[1293.0]: 63\n",
      "[1513.0]: 76\n",
      "[2245.0]: 45\n",
      "[1387.0]: 145\n",
      "[2352.0]: 76\n",
      "[1480.0]: 27\n",
      "[1488.0]: 27\n",
      "[1635.0]: 46\n",
      "[3255.0]: 110\n",
      "[1653.0]: 92\n",
      "[3189.0]: 29\n",
      "[1663.0]: 86\n",
      "[998.0]: 10\n",
      "[3274.0]: 36\n",
      "[2706.0]: 128\n",
      "[1772.0]: 23\n",
      "[170.0]: 118\n",
      "[249.0]: 42\n",
      "[346.0]: 14\n",
      "[1101.0]: 89\n",
      "[363.0]: 9\n",
      "[1112.0]: 4\n",
      "[377.0]: 163\n",
      "[1127.0]: 139\n",
      "[2795.0]: 58\n",
      "[2883.0]: 24\n",
      "[2893.0]: 7\n",
      "[482.0]: 19\n",
      "[1237.0]: 26\n",
      "[707.0]: 25\n",
      "[2070.0]: 25\n",
      "[2485.0]: 41\n",
      "[2581.0]: 60\n",
      "[12.0]: 44\n",
      "[1268.0]: 31\n",
      "[2097.0]: 17\n",
      "[1297.0]: 48\n",
      "[2474.0]: 30\n",
      "[141.0]: 101\n",
      "[1015.0]: 21\n",
      "[282.0]: 32\n",
      "[1032.0]: 45\n",
      "[1035.0]: 79\n",
      "[2005.0]: 57\n",
      "[538.0]: 33\n",
      "[2010.0]: 41\n",
      "[1084.0]: 62\n",
      "[492.0]: 141\n",
      "[13.0]: 53\n",
      "[803.0]: 5\n",
      "[2071.0]: 19\n",
      "[1535.0]: 10\n",
      "[1399.0]: 17\n",
      "[2276.0]: 8\n",
      "[2502.0]: 86\n",
      "[2435.0]: 8\n",
      "[3186.0]: 45\n",
      "[1733.0]: 7\n",
      "[205.0]: 95\n",
      "[2702.0]: 37\n",
      "[2583.0]: 20\n",
      "[2679.0]: 2\n",
      "[269.0]: 20\n",
      "[271.0]: 17\n",
      "[1043.0]: 9\n",
      "[1119.0]: 6\n",
      "[57.0]: 8\n",
      "[1054.0]: 8\n",
      "[388.0]: 11\n",
      "[1147.0]: 22\n",
      "[14.0]: 1\n",
      "[1739.0]: 4\n",
      "[15.0]: 28\n",
      "[2087.0]: 53\n",
      "[3050.0]: 2\n",
      "[885.0]: 6\n",
      "[1672.0]: 27\n",
      "[1848.0]: 19\n",
      "[1862.0]: 15\n",
      "[2596.0]: 15\n",
      "[26.0]: 14\n",
      "[16.0]: 9\n",
      "[3061.0]: 29\n",
      "[3259.0]: 33\n",
      "[1947.0]: 74\n",
      "[17.0]: 11\n",
      "[210.0]: 14\n",
      "[383.0]: 42\n",
      "[18.0]: 57\n",
      "[2134.0]: 45\n",
      "[3014.0]: 7\n",
      "[1359.0]: 19\n",
      "[2161.0]: 58\n",
      "[2249.0]: 28\n",
      "[1378.0]: 54\n",
      "[2409.0]: 38\n",
      "[3070.0]: 61\n",
      "[3243.0]: 28\n",
      "[3248.0]: 19\n",
      "[2378.0]: 42\n",
      "[2450.0]: 40\n",
      "[2393.0]: 75\n",
      "[3198.0]: 36\n",
      "[2476.0]: 27\n",
      "[151.0]: 55\n",
      "[1017.0]: 22\n",
      "[1019.0]: 45\n",
      "[2021.0]: 70\n",
      "[2116.0]: 34\n",
      "[2043.0]: 14\n",
      "[2118.0]: 34\n",
      "[19.0]: 12\n",
      "[1348.0]: 27\n",
      "[20.0]: 41\n",
      "[1593.0]: 16\n",
      "[2701.0]: 89\n",
      "[305.0]: 18\n",
      "[21.0]: 3\n",
      "[22.0]: 27\n",
      "[2142.0]: 20\n",
      "[343.0]: 23\n",
      "[361.0]: 32\n",
      "[484.0]: 25\n",
      "[23.0]: 47\n",
      "[3011.0]: 18\n",
      "[3037.0]: 67\n",
      "[949.0]: 26\n",
      "[3152.0]: 34\n",
      "[3244.0]: 36\n",
      "[2633.0]: 15\n",
      "[2662.0]: 52\n",
      "[2926.0]: 41\n",
      "[2863.0]: 43\n",
      "[24.0]: 94\n",
      "[2143.0]: 37\n",
      "[2162.0]: 14\n",
      "[837.0]: 15\n",
      "[2184.0]: 14\n",
      "[927.0]: 9\n",
      "[2413.0]: 44\n",
      "[950.0]: 26\n",
      "[1490.0]: 5\n",
      "[102.0]: 10\n",
      "[2558.0]: 21\n",
      "[2719.0]: 44\n",
      "[2574.0]: 17\n",
      "[1875.0]: 18\n",
      "[429.0]: 19\n",
      "[1046.0]: 7\n",
      "[1996.0]: 9\n",
      "[470.0]: 7\n",
      "[473.0]: 48\n",
      "[88.0]: 32\n",
      "[558.0]: 12\n",
      "[25.0]: 15\n",
      "[596.0]: 46\n",
      "[3028.0]: 19\n",
      "[27.0]: 39\n",
      "[1750.0]: 2\n",
      "[2009.0]: 31\n",
      "[2882.0]: 12\n",
      "[28.0]: 19\n",
      "[29.0]: 10\n",
      "[3217.0]: 11\n",
      "[1972.0]: 14\n",
      "[30.0]: 18\n",
      "[2924.0]: 15\n",
      "[31.0]: 9\n",
      "[32.0]: 19\n",
      "[2330.0]: 5\n",
      "[33.0]: 7\n",
      "[34.0]: 10\n",
      "[1261.0]: 45\n",
      "[35.0]: 9\n",
      "[36.0]: 57\n",
      "[2060.0]: 15\n",
      "[3261.0]: 36\n",
      "[2884.0]: 2\n",
      "[2381.0]: 15\n",
      "[2382.0]: 13\n",
      "[69.0]: 39\n",
      "[37.0]: 26\n",
      "[411.0]: 11\n",
      "[511.0]: 14\n",
      "[38.0]: 24\n",
      "[2098.0]: 7\n",
      "[1837.0]: 6\n",
      "[1713.0]: 22\n",
      "[87.0]: 38\n",
      "[39.0]: 140\n",
      "[3013.0]: 4\n",
      "[911.0]: 30\n",
      "[782.0]: 15\n",
      "[3208.0]: 20\n",
      "[1483.0]: 15\n",
      "[1689.0]: 33\n",
      "[1693.0]: 37\n",
      "[229.0]: 61\n",
      "[240.0]: 16\n",
      "[1866.0]: 22\n",
      "[259.0]: 14\n",
      "[2844.0]: 8\n",
      "[451.0]: 45\n",
      "[1130.0]: 26\n",
      "[2898.0]: 6\n",
      "[809.0]: 8\n",
      "[103.0]: 189\n",
      "[135.0]: 18\n",
      "[2586.0]: 3\n",
      "[1946.0]: 21\n",
      "[1975.0]: 13\n",
      "[360.0]: 19\n",
      "[1991.0]: 16\n",
      "[528.0]: 10\n",
      "[387.0]: 11\n",
      "[390.0]: 26\n",
      "[540.0]: 14\n",
      "[544.0]: 12\n",
      "[92.0]: 10\n",
      "[1241.0]: 8\n",
      "[40.0]: 74\n",
      "[2654.0]: 13\n",
      "[1194.0]: 20\n",
      "[3139.0]: 3\n",
      "[3153.0]: 26\n",
      "[42.0]: 18\n",
      "[1162.0]: 13\n",
      "[43.0]: 2\n",
      "[44.0]: 14\n",
      "[45.0]: 29\n",
      "[3051.0]: 9\n",
      "[2499.0]: 7\n",
      "[46.0]: 48\n",
      "[3235.0]: 4\n",
      "[1163.0]: 3\n",
      "[1558.0]: 1\n",
      "[1565.0]: 1\n",
      "[47.0]: 17\n",
      "[48.0]: 3\n",
      "[49.0]: 2\n",
      "[50.0]: 6\n",
      "[51.0]: 8\n",
      "[52.0]: 53\n",
      "[2203.0]: 18\n",
      "[2073.0]: 3\n",
      "[53.0]: 6\n",
      "[54.0]: 28\n",
      "[1131.0]: 19\n",
      "[2357.0]: 18\n",
      "[2757.0]: 12\n",
      "[55.0]: 12\n",
      "[896.0]: 4\n",
      "[1058.0]: 2\n",
      "[56.0]: 17\n",
      "[1974.0]: 26\n",
      "[58.0]: 9\n",
      "[59.0]: 4\n",
      "[60.0]: 17\n",
      "[3063.0]: 11\n",
      "[61.0]: 3\n",
      "[1758.0]: 9\n",
      "[62.0]: 41\n",
      "[2365.0]: 8\n",
      "[63.0]: 51\n",
      "[1431.0]: 21\n",
      "[2298.0]: 2\n",
      "[2540.0]: 13\n",
      "[1752.0]: 13\n",
      "[64.0]: 29\n",
      "[1983.0]: 16\n",
      "[65.0]: 3\n",
      "[2325.0]: 13\n",
      "[66.0]: 16\n",
      "[973.0]: 7\n",
      "[67.0]: 100\n",
      "[1495.0]: 5\n",
      "[2102.0]: 19\n",
      "[2195.0]: 12\n",
      "[2786.0]: 6\n",
      "[93.0]: 14\n",
      "[68.0]: 5\n",
      "[70.0]: 18\n",
      "[71.0]: 57\n",
      "[2367.0]: 28\n",
      "[72.0]: 39\n",
      "[1326.0]: 4\n",
      "[2740.0]: 1\n",
      "[73.0]: 37\n",
      "[74.0]: 40\n",
      "[75.0]: 6\n",
      "[76.0]: 29\n",
      "[148.0]: 16\n",
      "[77.0]: 5\n",
      "[78.0]: 73\n",
      "[3069.0]: 5\n",
      "[792.0]: 1\n",
      "[2848.0]: 6\n",
      "[1305.0]: 13\n",
      "[3111.0]: 16\n",
      "[850.0]: 3\n",
      "[2537.0]: 2\n",
      "[1999.0]: 12\n",
      "[2970.0]: 11\n",
      "[79.0]: 68\n",
      "[2849.0]: 4\n",
      "[603.0]: 4\n",
      "[80.0]: 8\n",
      "[81.0]: 4\n",
      "[82.0]: 8\n",
      "[695.0]: 9\n",
      "[83.0]: 61\n",
      "[84.0]: 10\n",
      "[85.0]: 18\n",
      "[615.0]: 5\n",
      "[86.0]: 11\n",
      "[2741.0]: 3\n",
      "[2192.0]: 2\n",
      "[89.0]: 20\n",
      "[90.0]: 3\n",
      "[91.0]: 9\n",
      "[94.0]: 10\n",
      "[96.0]: 19\n",
      "[97.0]: 51\n",
      "[2287.0]: 27\n",
      "[1631.0]: 9\n",
      "[3093.0]: 18\n",
      "[2483.0]: 3\n",
      "[1138.0]: 1\n",
      "[1152.0]: 4\n",
      "[2307.0]: 2\n",
      "[2503.0]: 2\n",
      "[2554.0]: 6\n",
      "[2705.0]: 1\n",
      "[2923.0]: 3\n",
      "[98.0]: 163\n",
      "[2212.0]: 7\n",
      "[2283.0]: 7\n",
      "[970.0]: 3\n",
      "[1662.0]: 3\n",
      "[1880.0]: 2\n",
      "[1116.0]: 1\n",
      "[472.0]: 14\n",
      "[1351.0]: 3\n",
      "[862.0]: 4\n",
      "[149.0]: 10\n",
      "[1767.0]: 2\n",
      "[501.0]: 9\n",
      "[513.0]: 8\n",
      "[1236.0]: 6\n",
      "[99.0]: 8\n",
      "[101.0]: 11\n",
      "[718.0]: 1\n",
      "[3079.0]: 13\n",
      "[3221.0]: 1\n",
      "[2810.0]: 2\n",
      "[2670.0]: 19\n",
      "[2862.0]: 11\n",
      "[3109.0]: 4\n",
      "[2737.0]: 3\n",
      "[2932.0]: 11\n",
      "[104.0]: 4\n",
      "[105.0]: 17\n",
      "[2653.0]: 2\n",
      "[106.0]: 5\n",
      "[107.0]: 3\n",
      "[1337.0]: 9\n",
      "[108.0]: 14\n",
      "[109.0]: 59\n",
      "[110.0]: 32\n",
      "[111.0]: 6\n",
      "[112.0]: 7\n",
      "[113.0]: 18\n",
      "[114.0]: 86\n",
      "[3142.0]: 10\n",
      "[2377.0]: 17\n",
      "[115.0]: 3\n",
      "[116.0]: 8\n",
      "[117.0]: 22\n",
      "[118.0]: 90\n",
      "[1612.0]: 3\n",
      "[656.0]: 2\n",
      "[2045.0]: 6\n",
      "[119.0]: 22\n",
      "[120.0]: 5\n",
      "[121.0]: 5\n",
      "[122.0]: 41\n",
      "[123.0]: 50\n",
      "[124.0]: 4\n",
      "[125.0]: 9\n",
      "[126.0]: 138\n",
      "[1646.0]: 8\n",
      "[127.0]: 4\n",
      "[128.0]: 14\n",
      "[129.0]: 15\n",
      "[130.0]: 5\n",
      "[131.0]: 23\n",
      "[132.0]: 15\n",
      "[133.0]: 10\n",
      "[134.0]: 11\n",
      "[2188.0]: 19\n",
      "[136.0]: 55\n",
      "[137.0]: 15\n",
      "[138.0]: 3\n",
      "[139.0]: 4\n",
      "[140.0]: 5\n",
      "[142.0]: 7\n",
      "[143.0]: 5\n",
      "[145.0]: 81\n",
      "[2669.0]: 9\n",
      "[3143.0]: 4\n",
      "[2743.0]: 1\n",
      "[146.0]: 59\n",
      "[147.0]: 10\n",
      "[150.0]: 3\n",
      "[152.0]: 16\n",
      "[153.0]: 41\n",
      "[154.0]: 115\n",
      "[155.0]: 37\n",
      "[568.0]: 1\n",
      "[156.0]: 45\n",
      "[157.0]: 6\n",
      "[158.0]: 4\n",
      "[160.0]: 27\n",
      "[161.0]: 7\n",
      "[162.0]: 6\n",
      "[164.0]: 114\n",
      "[888.0]: 3\n",
      "[165.0]: 33\n",
      "[166.0]: 5\n",
      "[167.0]: 3\n",
      "[168.0]: 11\n",
      "[169.0]: 10\n",
      "[2246.0]: 1\n",
      "[1925.0]: 7\n",
      "[171.0]: 39\n",
      "[172.0]: 11\n",
      "[173.0]: 22\n",
      "[174.0]: 23\n",
      "[867.0]: 1\n",
      "[176.0]: 5\n",
      "[177.0]: 8\n",
      "[178.0]: 36\n",
      "[179.0]: 4\n",
      "[180.0]: 44\n",
      "[181.0]: 9\n",
      "[182.0]: 14\n",
      "[183.0]: 6\n",
      "[184.0]: 8\n",
      "[185.0]: 4\n",
      "[186.0]: 3\n",
      "[187.0]: 6\n",
      "[1943.0]: 8\n",
      "[188.0]: 9\n",
      "[189.0]: 33\n",
      "[190.0]: 57\n",
      "[191.0]: 2\n",
      "[192.0]: 17\n",
      "[193.0]: 3\n",
      "[194.0]: 48\n",
      "[195.0]: 20\n",
      "[1341.0]: 4\n",
      "[196.0]: 27\n",
      "[197.0]: 11\n",
      "[199.0]: 40\n",
      "[200.0]: 2\n",
      "[201.0]: 11\n",
      "[202.0]: 9\n",
      "[203.0]: 3\n",
      "[204.0]: 3\n",
      "[206.0]: 14\n",
      "[207.0]: 19\n",
      "[209.0]: 19\n",
      "[211.0]: 38\n",
      "[1744.0]: 1\n",
      "[212.0]: 24\n",
      "[213.0]: 2\n",
      "[214.0]: 31\n",
      "[215.0]: 16\n",
      "[216.0]: 11\n",
      "[217.0]: 9\n",
      "[218.0]: 18\n",
      "[219.0]: 13\n",
      "[220.0]: 8\n",
      "[221.0]: 5\n",
      "[222.0]: 7\n",
      "[223.0]: 24\n",
      "[224.0]: 4\n",
      "[225.0]: 5\n",
      "[226.0]: 12\n",
      "[227.0]: 11\n",
      "[228.0]: 10\n",
      "[230.0]: 25\n",
      "[231.0]: 6\n",
      "[232.0]: 18\n",
      "[233.0]: 2\n",
      "[234.0]: 11\n",
      "[235.0]: 1\n",
      "[236.0]: 16\n",
      "[237.0]: 22\n",
      "[238.0]: 31\n",
      "[239.0]: 26\n",
      "[241.0]: 13\n",
      "[242.0]: 3\n",
      "[243.0]: 16\n",
      "[244.0]: 54\n",
      "[245.0]: 23\n",
      "[246.0]: 3\n",
      "[247.0]: 17\n",
      "[2284.0]: 5\n",
      "[248.0]: 22\n",
      "[250.0]: 7\n",
      "[251.0]: 20\n",
      "[252.0]: 10\n",
      "[253.0]: 34\n",
      "[254.0]: 4\n",
      "[255.0]: 54\n",
      "[256.0]: 14\n",
      "[257.0]: 15\n",
      "[565.0]: 3\n",
      "[258.0]: 18\n",
      "[261.0]: 5\n",
      "[262.0]: 17\n",
      "[263.0]: 124\n",
      "[972.0]: 1\n",
      "[3171.0]: 1\n",
      "[264.0]: 45\n",
      "[266.0]: 84\n",
      "[267.0]: 65\n",
      "[268.0]: 2\n",
      "[270.0]: 7\n",
      "[272.0]: 37\n",
      "[309.0]: 19\n",
      "[273.0]: 28\n",
      "[274.0]: 65\n",
      "[275.0]: 3\n",
      "[276.0]: 37\n",
      "[277.0]: 69\n",
      "[278.0]: 6\n",
      "[279.0]: 47\n",
      "[280.0]: 3\n",
      "[281.0]: 18\n",
      "[283.0]: 20\n",
      "[284.0]: 86\n",
      "[460.0]: 18\n",
      "[285.0]: 4\n",
      "[286.0]: 8\n",
      "[287.0]: 14\n",
      "[288.0]: 60\n",
      "[289.0]: 37\n",
      "[290.0]: 39\n",
      "[291.0]: 30\n",
      "[293.0]: 5\n",
      "[294.0]: 31\n",
      "[295.0]: 29\n",
      "[296.0]: 21\n",
      "[297.0]: 66\n",
      "[298.0]: 96\n",
      "[1496.0]: 2\n",
      "[299.0]: 7\n",
      "[300.0]: 60\n",
      "[301.0]: 27\n",
      "[302.0]: 48\n",
      "[303.0]: 77\n",
      "[304.0]: 34\n",
      "[567.0]: 2\n",
      "[307.0]: 38\n",
      "[308.0]: 31\n",
      "[310.0]: 43\n",
      "[311.0]: 10\n",
      "[312.0]: 5\n",
      "[313.0]: 93\n",
      "[314.0]: 13\n",
      "[315.0]: 9\n",
      "[316.0]: 14\n",
      "[317.0]: 11\n",
      "[318.0]: 81\n",
      "[811.0]: 2\n",
      "[319.0]: 13\n",
      "[320.0]: 12\n",
      "[321.0]: 11\n",
      "[322.0]: 74\n",
      "[323.0]: 15\n",
      "[324.0]: 6\n",
      "[325.0]: 1\n",
      "[326.0]: 70\n",
      "[327.0]: 6\n",
      "[328.0]: 3\n",
      "[329.0]: 24\n",
      "[330.0]: 105\n",
      "[331.0]: 92\n",
      "[1426.0]: 1\n",
      "[332.0]: 46\n",
      "[333.0]: 22\n",
      "[334.0]: 16\n",
      "[335.0]: 2\n",
      "[336.0]: 35\n",
      "[337.0]: 32\n",
      "[338.0]: 6\n",
      "[339.0]: 8\n",
      "[340.0]: 15\n",
      "[341.0]: 1\n",
      "[342.0]: 15\n",
      "[344.0]: 6\n",
      "[345.0]: 6\n",
      "[347.0]: 20\n",
      "[348.0]: 49\n",
      "[349.0]: 80\n",
      "[350.0]: 5\n",
      "[351.0]: 20\n",
      "[352.0]: 42\n",
      "[353.0]: 5\n",
      "[354.0]: 1\n",
      "[355.0]: 12\n",
      "[356.0]: 1\n",
      "[357.0]: 3\n",
      "[358.0]: 4\n",
      "[359.0]: 36\n",
      "[362.0]: 13\n",
      "[364.0]: 21\n",
      "[365.0]: 22\n",
      "[366.0]: 1\n",
      "[367.0]: 1\n",
      "[368.0]: 117\n",
      "[369.0]: 5\n",
      "[2200.0]: 1\n",
      "[370.0]: 80\n",
      "[371.0]: 18\n",
      "[372.0]: 9\n",
      "[373.0]: 3\n",
      "[374.0]: 28\n",
      "[375.0]: 10\n",
      "[376.0]: 16\n",
      "[378.0]: 2\n",
      "[379.0]: 8\n",
      "[380.0]: 18\n",
      "[381.0]: 8\n",
      "[382.0]: 13\n",
      "[384.0]: 6\n",
      "[385.0]: 27\n",
      "[386.0]: 13\n",
      "[389.0]: 12\n",
      "[391.0]: 5\n",
      "[392.0]: 13\n",
      "[393.0]: 7\n",
      "[394.0]: 15\n",
      "[395.0]: 81\n",
      "[396.0]: 2\n",
      "[397.0]: 25\n",
      "[398.0]: 15\n",
      "[399.0]: 22\n",
      "[400.0]: 18\n",
      "[401.0]: 31\n",
      "[402.0]: 21\n",
      "[403.0]: 9\n",
      "[404.0]: 15\n",
      "[405.0]: 25\n",
      "[406.0]: 9\n",
      "[407.0]: 5\n",
      "[408.0]: 11\n",
      "[409.0]: 4\n",
      "[410.0]: 78\n",
      "[412.0]: 49\n",
      "[413.0]: 42\n",
      "[414.0]: 25\n",
      "[415.0]: 9\n",
      "[416.0]: 5\n",
      "[417.0]: 2\n",
      "[418.0]: 15\n",
      "[1539.0]: 1\n",
      "[419.0]: 4\n",
      "[420.0]: 28\n",
      "[421.0]: 8\n",
      "[422.0]: 86\n",
      "[423.0]: 4\n",
      "[424.0]: 23\n",
      "[425.0]: 3\n",
      "[426.0]: 9\n",
      "[427.0]: 23\n",
      "[428.0]: 46\n",
      "[430.0]: 13\n",
      "[431.0]: 31\n",
      "[432.0]: 10\n",
      "[433.0]: 16\n",
      "[434.0]: 19\n",
      "[435.0]: 8\n",
      "[436.0]: 16\n",
      "[437.0]: 40\n",
      "[438.0]: 11\n",
      "[439.0]: 11\n",
      "[440.0]: 30\n",
      "[441.0]: 5\n",
      "[442.0]: 5\n",
      "[443.0]: 41\n",
      "[1514.0]: 2\n",
      "[444.0]: 53\n",
      "[445.0]: 14\n",
      "[446.0]: 20\n",
      "[447.0]: 31\n",
      "[448.0]: 13\n",
      "[449.0]: 28\n",
      "[2579.0]: 1\n",
      "[450.0]: 13\n",
      "[452.0]: 15\n",
      "[453.0]: 71\n",
      "[454.0]: 11\n",
      "[455.0]: 30\n",
      "[456.0]: 1\n",
      "[457.0]: 13\n",
      "[458.0]: 10\n",
      "[459.0]: 12\n",
      "[461.0]: 19\n",
      "[462.0]: 21\n",
      "[463.0]: 26\n",
      "[1898.0]: 1\n",
      "[464.0]: 18\n",
      "[2821.0]: 1\n",
      "[465.0]: 10\n",
      "[466.0]: 12\n",
      "[467.0]: 40\n",
      "[468.0]: 43\n",
      "[633.0]: 1\n",
      "[469.0]: 29\n",
      "[618.0]: 1\n",
      "[471.0]: 25\n",
      "[475.0]: 69\n",
      "[476.0]: 16\n",
      "[477.0]: 19\n",
      "[478.0]: 17\n",
      "[479.0]: 29\n",
      "[481.0]: 9\n",
      "[483.0]: 7\n",
      "[485.0]: 28\n",
      "[486.0]: 3\n",
      "[487.0]: 13\n",
      "[488.0]: 33\n",
      "[489.0]: 10\n",
      "[490.0]: 20\n",
      "[491.0]: 30\n",
      "[2157.0]: 1\n",
      "[493.0]: 15\n",
      "[494.0]: 33\n",
      "\n",
      "L1:\n",
      "[480.0]: 209\n",
      "[1270.0]: 216\n",
      "[1265.0]: 203\n",
      "[1197.0]: 196\n",
      "[260.0]: 248\n",
      "[527.0]: 211\n",
      "[2028.0]: 227\n",
      "[858.0]: 190\n",
      "[103.0]: 189\n",
      "\n",
      "m2:\n",
      "[1265.0, 260.0]: 0\n",
      "[1265.0, 858.0]: 0\n",
      "[480.0, 1265.0]: 0\n",
      "[1265.0, 103.0]: 1\n",
      "[1197.0, 1270.0]: 0\n",
      "[260.0, 1197.0]: 0\n",
      "[858.0, 1197.0]: 0\n",
      "[1197.0, 103.0]: 1\n",
      "[480.0, 103.0]: 1\n",
      "[480.0, 858.0]: 0\n",
      "[480.0, 260.0]: 0\n",
      "[1265.0, 527.0]: 0\n",
      "[1265.0, 2028.0]: 0\n",
      "[480.0, 2028.0]: 0\n",
      "[260.0, 1270.0]: 1\n",
      "[858.0, 1270.0]: 0\n",
      "[1270.0, 103.0]: 1\n",
      "[1197.0, 527.0]: 0\n",
      "[1265.0, 1270.0]: 0\n",
      "[858.0, 260.0]: 1\n",
      "[260.0, 103.0]: 1\n",
      "[858.0, 103.0]: 1\n",
      "[1270.0, 527.0]: 0\n",
      "[480.0, 1270.0]: 0\n",
      "[260.0, 2028.0]: 0\n",
      "[858.0, 2028.0]: 0\n",
      "[2028.0, 103.0]: 1\n",
      "[1265.0, 1197.0]: 0\n",
      "[480.0, 1197.0]: 1\n",
      "[260.0, 527.0]: 0\n",
      "[858.0, 527.0]: 0\n",
      "[103.0, 527.0]: 1\n",
      "[2028.0, 1197.0]: 0\n",
      "[2028.0, 1270.0]: 0\n",
      "[2028.0, 527.0]: 0\n",
      "[480.0, 527.0]: 0\n",
      "\n",
      "L2:\n",
      "\n",
      "Result: \n",
      "L1:\n",
      "[480.0]: 209\n",
      "[1270.0]: 216\n",
      "[1265.0]: 203\n",
      "[1197.0]: 196\n",
      "[260.0]: 248\n",
      "[527.0]: 211\n",
      "[2028.0]: 227\n",
      "[858.0]: 190\n",
      "[103.0]: 189\n",
      "\n",
      "[] -> [480.0] = 1.7797837009282125%\n",
      "[480.0] -> [] = 100.0%\n",
      "Movie: 2 \n",
      "\n",
      "[] -> [1270.0] = 1.8393936813420761%\n",
      "[1270.0] -> [] = 100.0%\n",
      "Movie: 2 \n",
      "\n",
      "[] -> [1265.0] = 1.7286894320020438%\n",
      "[1265.0] -> [] = 100.0%\n",
      "Movie: 2 \n",
      "\n",
      "[] -> [1197.0] = 1.6690794515881802%\n",
      "[1197.0] -> [] = 100.0%\n",
      "Movie: 2 \n",
      "\n",
      "[] -> [260.0] = 2.11189644894831%\n",
      "[260.0] -> [] = 100.0%\n",
      "Movie: 2 \n",
      "\n",
      "[] -> [527.0] = 1.796815123903602%\n",
      "[527.0] -> [] = 100.0%\n",
      "Movie: 2 \n",
      "\n",
      "[] -> [2028.0] = 1.933066507706719%\n",
      "[2028.0] -> [] = 100.0%\n",
      "Movie: 2 \n",
      "\n",
      "[] -> [858.0] = 1.6179851826620115%\n",
      "[858.0] -> [] = 100.0%\n",
      "Movie: 2 \n",
      "\n",
      "[] -> [103.0] = 1.6094694711743167%\n",
      "[103.0] -> [] = 100.0%\n",
      "Movie: 2 \n",
      "\n"
     ]
    }
   ],
   "source": [
    "init = []\n",
    "for i in user_movie_data: #appending data\n",
    "    for q in i:\n",
    "        if(q not in init):\n",
    "            init.append(q)\n",
    "\n",
    "print(init)\n",
    "\n",
    "sp = 0.2 #support\n",
    "s = int(sp*len(init))\n",
    "\n",
    "from collections import Counter\n",
    "c = Counter()\n",
    "for i in init:\n",
    "    for d in user_movie_data:# accesing the eelements\n",
    "        if(i in d):\n",
    "            c[i]+=1\n",
    "print(\"m1:\")\n",
    "for i in c:\n",
    "    print(str([i])+\": \"+str(c[i]))\n",
    "print()\n",
    "l = Counter()\n",
    "for i in c:\n",
    "    if(c[i] >= s):\n",
    "        l[frozenset([i])]+=c[i]# creating frozen sets for that can be used as an dict value\n",
    "print(\"L1:\")\n",
    "for i in l:\n",
    "    print(str(list(i))+\": \"+str(l[i]))\n",
    "print()\n",
    "pl = l\n",
    "pos = 1\n",
    "for count in range (2,1000):\n",
    "    nc = set()\n",
    "    temp = list(l)\n",
    "    for i in range(0,len(temp)):\n",
    "        for j in range(i+1,len(temp)):\n",
    "            t = temp[i].union(temp[j])\n",
    "            if(len(t) == count):\n",
    "                nc.add(temp[i].union(temp[j]))\n",
    "    nc = list(nc)\n",
    "    c = Counter()\n",
    "    for i in nc:\n",
    "        c[i] = 0\n",
    "        for q in user_movie_data:\n",
    "            temp = set(q)\n",
    "            if(i.issubset(temp)):\n",
    "                c[i]+=1\n",
    "    print(\"m\"+str(count)+\":\")\n",
    "    for i in c:\n",
    "        print(str(list(i))+\": \"+str(c[i]))\n",
    "    print()\n",
    "    l = Counter()\n",
    "    for i in c:\n",
    "        if(c[i] >= s):\n",
    "            l[i]+=c[i]\n",
    "    print(\"L\"+str(count)+\":\")\n",
    "    for i in l:\n",
    "        print(str(list(i))+\": \"+str(l[i]))\n",
    "    print()\n",
    "    if(len(l) == 0):\n",
    "        break\n",
    "    pl = l\n",
    "    pos = count\n",
    "print(\"Result: \")\n",
    "print(\"L\"+str(pos)+\":\")\n",
    "for i in pl:\n",
    "    print(str(list(i))+\": \"+str(pl[i]))\n",
    "print()\n",
    "\n",
    "from itertools import combinations # Creating Associations rule for the Apriori\n",
    "for l in pl:\n",
    "    c = [frozenset(q) for q in combinations(l,len(l)-1)]\n",
    "    mmax = 0\n",
    "    for a in c:\n",
    "        b = l-a\n",
    "        ab = l\n",
    "        sab = 0\n",
    "        sa = 0\n",
    "        sb = 0\n",
    "        for q in user_movie_data:\n",
    "            temp = set(q)\n",
    "            if(a.issubset(temp)):\n",
    "                sa+=1\n",
    "            if(b.issubset(temp)):\n",
    "                sb+=1\n",
    "            if(ab.issubset(temp)):\n",
    "                sab+=1\n",
    "        temp = sab/sa*100\n",
    "        if(temp > mmax):\n",
    "            mmax = temp\n",
    "        temp = sab/sb*100\n",
    "        if(temp > mmax):\n",
    "            mmax = temp\n",
    "        print(str(list(a))+\" -> \"+str(list(b))+\" = \"+str(sab/sa*100)+\"%\")\n",
    "        print(str(list(b))+\" -> \"+str(list(a))+\" = \"+str(sab/sb*100)+\"%\")\n",
    "    curr = 1\n",
    "    print(\"Movie:\", end=' ')\n",
    "    for a in c:\n",
    "        b = l-a\n",
    "        ab = l\n",
    "        sab = 0\n",
    "        sa = 0\n",
    "        sb = 0\n",
    "        for q in user_movie_data:\n",
    "            temp = set(q)\n",
    "            if(a.issubset(temp)):\n",
    "                sa+=1\n",
    "            if(b.issubset(temp)):\n",
    "                sb+=1\n",
    "            if(ab.issubset(temp)):\n",
    "                sab+=1\n",
    "        temp = sab/sa*100\n",
    "        if(temp == mmax):\n",
    "            print(curr, end = ' ')\n",
    "        curr += 1\n",
    "        temp = sab/sb*100\n",
    "        if(temp == mmax):\n",
    "            print(curr, end = ' ')\n",
    "        curr += 1\n",
    "    print()\n",
    "    print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\n",
      "Toy Story (1995) Jumanji (1995) ==> Waiting to Exhale (1995)\n",
      "2                  Grumpier Old Men (1995)\n",
      "3                 Waiting to Exhale (1995)\n",
      "4       Father of the Bride Part II (1995)\n",
      "5                              Heat (1995)\n",
      "6                           Sabrina (1995)\n",
      "                       ...                \n",
      "3878               Meet the Parents (2000)\n",
      "3879            Requiem for a Dream (2000)\n",
      "3880                      Tigerland (2000)\n",
      "3881               Two Family House (2000)\n",
      "3882                 Contender, The (2000)\n",
      "Name: movie_name, Length: 3881, dtype: object\n",
      "\n",
      "2                  Grumpier Old Men (1995)\n",
      "3                 Waiting to Exhale (1995)\n",
      "4       Father of the Bride Part II (1995)\n",
      "5                              Heat (1995)\n",
      "6                           Sabrina (1995)\n",
      "                       ...                \n",
      "3878               Meet the Parents (2000)\n",
      "3879            Requiem for a Dream (2000)\n",
      "3880                      Tigerland (2000)\n",
      "3881               Two Family House (2000)\n",
      "3882                 Contender, The (2000)\n",
      "Name: movie_name, Length: 3881, dtype: object\n",
      "\n",
      "2                  Grumpier Old Men (1995)\n",
      "3                 Waiting to Exhale (1995)\n",
      "4       Father of the Bride Part II (1995)\n",
      "5                              Heat (1995)\n",
      "6                           Sabrina (1995)\n",
      "                       ...                \n",
      "3878               Meet the Parents (2000)\n",
      "3879            Requiem for a Dream (2000)\n",
      "3880                      Tigerland (2000)\n",
      "3881               Two Family House (2000)\n",
      "3882                 Contender, The (2000)\n",
      "Name: movie_name, Length: 3881, dtype: object\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd # Generating movies result according to the association rules\n",
    "dt=pd.read_csv('movies.csv')\n",
    "dt\n",
    "for i in dt:\n",
    "    print(\"\")\n",
    "data_f = pd.read_table(\"movie_rated.txt\", delimiter=\" \")\n",
    "data_f['movie_rated']  = data_f\n",
    "data_f.drop(['1,2160'],axis=1,inplace=True)\n",
    "data_f\n",
    "\n",
    "df_all_cols = pd.concat([dt, data_f], axis = 1)\n",
    "df_all_cols.drop(['movie_rated'],axis=1)\n",
    "\n",
    "df_all_cols2 = pd.concat([dt, data_f], axis = 1)\n",
    "df_all_cols2[\"movie_rated\"] = df_all_cols2[\"movie_rated\"].replace(\",\", \"\", regex=True)\n",
    "df_all_cols2['movie_rated'] = df_all_cols2['movie_rated'].astype('float64')\n",
    "df_all_cols2\n",
    "\n",
    "means = df_all_cols2.iloc[0:, 2:].median().sort_values(ascending=False)\n",
    "means\n",
    "\n",
    "counts =df_all_cols2.iloc[:, 2:].count()\n",
    "counts\n",
    "\n",
    "init_1 = []\n",
    "for i in df_all_cols2:\n",
    "    for q in i:\n",
    "        if(q not in init_1):\n",
    "            init.append(q)\n",
    "init = sorted(init_1)\n",
    "print(\"\")\n",
    "\n",
    "sp = 0.2\n",
    "s = int(sp*len(init_1))\n",
    "s\n",
    "\n",
    "from itertools import combinations\n",
    "for l in pl:\n",
    "    c = [frozenset(q) for q in combinations(l,len(l)-1)]\n",
    "    nmmax = 0\n",
    "    for a in c:\n",
    "        b = l-a\n",
    "        ab = l\n",
    "        sab = 0\n",
    "        sa = 0\n",
    "        sb = 0\n",
    "        for q in df_all_cols2:\n",
    "            temp1 = set(q)\n",
    "            if(a.issubset(temp1)):\n",
    "                sa+=1\n",
    "            if(b.issubset(temp1)):\n",
    "                sb+=1\n",
    "            if(ab.issubset(temp1)):\n",
    "                sab+=1\n",
    "        temp1 = sab/sa*100\n",
    "        if(temp1 > nmmax):\n",
    "            nmmax = temp1\n",
    "            temp1 = sab/sb*100\n",
    "        if(temp1 > nmmax):\n",
    "            nmmax = temp1\n",
    "            print(str(list(a))+\" -> \"+str(list(b))+\" = \"+str(sab/sa*100)+\"%\")\n",
    "            print(str(list(b))+\" -> \"+str(list(a))+\" = \"+str(sab/sb*100)+\"%\")\n",
    "    curr = 1\n",
    "print(df_all_cols2['movie_name'][0], end=' ')\n",
    "for a in c:\n",
    "        b = l-a\n",
    "        ab = l\n",
    "        sab = 0\n",
    "        sa = 0\n",
    "        sb = 0\n",
    "        for q in df_all_cols2:\n",
    "            temp1 = set(q)\n",
    "            if(a.issubset(temp1)):\n",
    "                sa+=1\n",
    "            if(b.issubset(temp1)):\n",
    "                sb+=1\n",
    "            if(ab.issubset(temp1)):\n",
    "                sab+=1\n",
    "                temp1 = sab/sa*100\n",
    "            if(temp1 == nmmax):\n",
    "                print(curr, end = ' ')\n",
    "                curr += 1\n",
    "                temp1 = sab/sb*100\n",
    "                if(temp1 == nmmax):\n",
    "                    print(curr, end = ' ')\n",
    "                curr += 1\n",
    "                print()\n",
    "                print()\n",
    "from itertools import combinations\n",
    "for l in pl:\n",
    "    c = [frozenset(q) for q in combinations(l,len(l)-1)]\n",
    "    nmmax = 0\n",
    "    for a in c:\n",
    "        b = l-a\n",
    "        ab = l\n",
    "        sab = 0\n",
    "        sa = 0\n",
    "        sb = 0\n",
    "        for q in df_all_cols2:\n",
    "            temp1 = set(q)\n",
    "            if(a.issubset(temp1)):\n",
    "                sa+=1\n",
    "            if(b.issubset(temp1)):\n",
    "                sb+=1\n",
    "            if(ab.issubset(temp1)):\n",
    "                sab+=1\n",
    "            temp1 = sab/sa*100\n",
    "            if(temp1 > nmmax):\n",
    "                nmmax = temp1\n",
    "                temp1 = sab/sb*100\n",
    "            if(temp1 > nmmax):\n",
    "                nmmax = temp1\n",
    "                print(str(list(a))+\" -> \"+str(list(b))+\" = \"+str(sab/sa*100)+\"%\")\n",
    "                print(str(list(b))+\" -> \"+str(list(a))+\" = \"+str(sab/sb*100)+\"%\")\n",
    "    curr = 1\n",
    "print(df_all_cols2['movie_name'][1],\"==>\",df_all_cols2['movie_name'][3])\n",
    "for a in c:\n",
    "        b = l-a\n",
    "        ab = l\n",
    "        sab = 0\n",
    "        sa = 0\n",
    "        sb = 0\n",
    "        for q in df_all_cols2:\n",
    "            temp1 = set(q)\n",
    "            if(a.issubset(temp1)):\n",
    "                sa+=1\n",
    "            if(b.issubset(temp1)):\n",
    "                sb+=1\n",
    "            if(ab.issubset(temp1)):\n",
    "                sab+=1\n",
    "                temp1 = sab/sa*100\n",
    "            if(temp1 == nmmax):\n",
    "                print(curr, end = ' ')\n",
    "                curr += 1\n",
    "                temp1 = sab/sb*100\n",
    "                if(temp1 == nmmax):\n",
    "                    print(curr, end = ' ')\n",
    "                    curr += 1\n",
    "            print(df_all_cols2['movie_name'][2:3883])\n",
    "            print()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "Finally, print your final association rules in the following format:\n",
    "\n",
    "**movie_name_1, movie_name_2, ... --> movie_name_k**\n",
    "\n",
    "where the movie names can be fetched by joining the movieId with the file 'movies.csv'. For example, one rule that you should find is:\n",
    "\n",
    "**Jurassic Park (1993), Back to the Future (1985) --> Star Wars: Episode IV - A New Hope (1977)**\n",
    "\n",
    "**Hint: You may need to use the Pandas library to load and process the movies.csv file, such as use pandas.read_csv() to load the data. https://pandas.pydata.org/pandas-docs/dev/user_guide/10min.html is a good place to learn the basics about Pandas.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "35226"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_all_cols2.size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4390,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Association rules are\n",
      "[] -> [480.0] = 1.7797837009282125%\n",
      "[480.0] -> [] = 100.0%\n",
      "39094\n",
      "Movie: 39094 [] -> [1270.0] = 1.8393936813420761%\n",
      "[1270.0] -> [] = 100.0%\n",
      "39095\n",
      "Movie: 39095 [] -> [1265.0] = 1.7286894320020438%\n",
      "[1265.0] -> [] = 100.0%\n",
      "39096\n",
      "Movie: 39096 [] -> [1197.0] = 1.6690794515881802%\n",
      "[1197.0] -> [] = 100.0%\n",
      "39097\n",
      "Movie: 39097 [] -> [260.0] = 2.11189644894831%\n",
      "[260.0] -> [] = 100.0%\n",
      "39098\n",
      "Movie: 39098 [] -> [527.0] = 1.796815123903602%\n",
      "[527.0] -> [] = 100.0%\n",
      "39099\n",
      "Movie: 39099 [] -> [2028.0] = 1.933066507706719%\n",
      "[2028.0] -> [] = 100.0%\n",
      "39100\n",
      "Movie: 39100 [] -> [858.0] = 1.6179851826620115%\n",
      "[858.0] -> [] = 100.0%\n",
      "39101\n",
      "Movie: 39101 [] -> [103.0] = 1.6094694711743167%\n",
      "[103.0] -> [] = 100.0%\n",
      "39102\n",
      "Movie: 39102 Association rules are\n",
      "[] -> [480.0] = 1.7797837009282125%\n",
      "[480.0] -> [] = 100.0%\n",
      "39103\n",
      "Movie: 39103 [] -> [1270.0] = 1.8393936813420761%\n",
      "[1270.0] -> [] = 100.0%\n",
      "39104\n",
      "Movie: 39104 [] -> [1265.0] = 1.7286894320020438%\n",
      "[1265.0] -> [] = 100.0%\n",
      "39105\n",
      "Movie: 39105 [] -> [1197.0] = 1.6690794515881802%\n",
      "[1197.0] -> [] = 100.0%\n",
      "39106\n",
      "Movie: 39106 [] -> [260.0] = 2.11189644894831%\n",
      "[260.0] -> [] = 100.0%\n",
      "39107\n",
      "Movie: 39107 [] -> [527.0] = 1.796815123903602%\n",
      "[527.0] -> [] = 100.0%\n",
      "39108\n",
      "Movie: 39108 [] -> [2028.0] = 1.933066507706719%\n",
      "[2028.0] -> [] = 100.0%\n",
      "39109\n",
      "Movie: 39109 [] -> [858.0] = 1.6179851826620115%\n",
      "[858.0] -> [] = 100.0%\n",
      "39110\n",
      "Movie: 39110 [] -> [103.0] = 1.6094694711743167%\n",
      "[103.0] -> [] = 100.0%\n",
      "39111\n",
      "Movie: 39111 Association rules are\n",
      "[] -> [480.0] = 1.7797837009282125%\n",
      "[480.0] -> [] = 100.0%\n",
      "39112\n",
      "Movie: 39112 [] -> [1270.0] = 1.8393936813420761%\n",
      "[1270.0] -> [] = 100.0%\n",
      "39113\n",
      "Movie: 39113 [] -> [1265.0] = 1.7286894320020438%\n",
      "[1265.0] -> [] = 100.0%\n",
      "39114\n",
      "Movie: 39114 [] -> [1197.0] = 1.6690794515881802%\n",
      "[1197.0] -> [] = 100.0%\n",
      "39115\n",
      "Movie: 39115 [] -> [260.0] = 2.11189644894831%\n",
      "[260.0] -> [] = 100.0%\n",
      "39116\n",
      "Movie: 39116 [] -> [527.0] = 1.796815123903602%\n",
      "[527.0] -> [] = 100.0%\n",
      "39117\n",
      "Movie: 39117 [] -> [2028.0] = 1.933066507706719%\n",
      "[2028.0] -> [] = 100.0%\n",
      "39118\n",
      "Movie: 39118 [] -> [858.0] = 1.6179851826620115%\n",
      "[858.0] -> [] = 100.0%\n",
      "39119\n",
      "Movie: 39119 [] -> [103.0] = 1.6094694711743167%\n",
      "[103.0] -> [] = 100.0%\n",
      "39120\n",
      "Movie: 39120 Association rules are\n",
      "[] -> [480.0] = 1.7797837009282125%\n",
      "[480.0] -> [] = 100.0%\n",
      "39121\n",
      "Movie: 39121 [] -> [1270.0] = 1.8393936813420761%\n",
      "[1270.0] -> [] = 100.0%\n",
      "39122\n",
      "Movie: 39122 [] -> [1265.0] = 1.7286894320020438%\n",
      "[1265.0] -> [] = 100.0%\n",
      "39123\n",
      "Movie: 39123 [] -> [1197.0] = 1.6690794515881802%\n",
      "[1197.0] -> [] = 100.0%\n",
      "39124\n",
      "Movie: 39124 [] -> [260.0] = 2.11189644894831%\n",
      "[260.0] -> [] = 100.0%\n",
      "39125\n",
      "Movie: 39125 [] -> [527.0] = 1.796815123903602%\n",
      "[527.0] -> [] = 100.0%\n",
      "39126\n",
      "Movie: 39126 [] -> [2028.0] = 1.933066507706719%\n",
      "[2028.0] -> [] = 100.0%\n",
      "39127\n",
      "Movie: 39127 [] -> [858.0] = 1.6179851826620115%\n",
      "[858.0] -> [] = 100.0%\n",
      "39128\n",
      "Movie: 39128 [] -> [103.0] = 1.6094694711743167%\n",
      "[103.0] -> [] = 100.0%\n",
      "39129\n",
      "Movie: 39129 Association rules are\n",
      "[] -> [480.0] = 1.7797837009282125%\n",
      "[480.0] -> [] = 100.0%\n",
      "39130\n",
      "Movie: 39130 [] -> [1270.0] = 1.8393936813420761%\n",
      "[1270.0] -> [] = 100.0%\n",
      "39131\n",
      "Movie: 39131 [] -> [1265.0] = 1.7286894320020438%\n",
      "[1265.0] -> [] = 100.0%\n",
      "39132\n",
      "Movie: 39132 [] -> [1197.0] = 1.6690794515881802%\n",
      "[1197.0] -> [] = 100.0%\n",
      "39133\n",
      "Movie: 39133 [] -> [260.0] = 2.11189644894831%\n",
      "[260.0] -> [] = 100.0%\n",
      "39134\n",
      "Movie: 39134 [] -> [527.0] = 1.796815123903602%\n",
      "[527.0] -> [] = 100.0%\n",
      "39135\n",
      "Movie: 39135 [] -> [2028.0] = 1.933066507706719%\n",
      "[2028.0] -> [] = 100.0%\n",
      "39136\n",
      "Movie: 39136 [] -> [858.0] = 1.6179851826620115%\n",
      "[858.0] -> [] = 100.0%\n",
      "39137\n",
      "Movie: 39137 [] -> [103.0] = 1.6094694711743167%\n",
      "[103.0] -> [] = 100.0%\n",
      "39138\n",
      "Movie: 39138 Association rules are\n",
      "[] -> [480.0] = 1.7797837009282125%\n",
      "[480.0] -> [] = 100.0%\n",
      "39139\n",
      "Movie: 39139 [] -> [1270.0] = 1.8393936813420761%\n",
      "[1270.0] -> [] = 100.0%\n",
      "39140\n",
      "Movie: 39140 [] -> [1265.0] = 1.7286894320020438%\n",
      "[1265.0] -> [] = 100.0%\n",
      "39141\n",
      "Movie: 39141 [] -> [1197.0] = 1.6690794515881802%\n",
      "[1197.0] -> [] = 100.0%\n",
      "39142\n",
      "Movie: 39142 [] -> [260.0] = 2.11189644894831%\n",
      "[260.0] -> [] = 100.0%\n",
      "39143\n",
      "Movie: 39143 [] -> [527.0] = 1.796815123903602%\n",
      "[527.0] -> [] = 100.0%\n",
      "39144\n",
      "Movie: 39144 [] -> [2028.0] = 1.933066507706719%\n",
      "[2028.0] -> [] = 100.0%\n",
      "39145\n",
      "Movie: 39145 [] -> [858.0] = 1.6179851826620115%\n",
      "[858.0] -> [] = 100.0%\n",
      "39146\n",
      "Movie: 39146 [] -> [103.0] = 1.6094694711743167%\n",
      "[103.0] -> [] = 100.0%\n",
      "39147\n",
      "Movie: 39147 Association rules are\n",
      "[] -> [480.0] = 1.7797837009282125%\n",
      "[480.0] -> [] = 100.0%\n",
      "39148\n",
      "Movie: 39148 [] -> [1270.0] = 1.8393936813420761%\n",
      "[1270.0] -> [] = 100.0%\n",
      "39149\n",
      "Movie: 39149 [] -> [1265.0] = 1.7286894320020438%\n",
      "[1265.0] -> [] = 100.0%\n",
      "39150\n",
      "Movie: 39150 [] -> [1197.0] = 1.6690794515881802%\n",
      "[1197.0] -> [] = 100.0%\n",
      "39151\n",
      "Movie: 39151 [] -> [260.0] = 2.11189644894831%\n",
      "[260.0] -> [] = 100.0%\n",
      "39152\n",
      "Movie: 39152 [] -> [527.0] = 1.796815123903602%\n",
      "[527.0] -> [] = 100.0%\n",
      "39153\n",
      "Movie: 39153 [] -> [2028.0] = 1.933066507706719%\n",
      "[2028.0] -> [] = 100.0%\n",
      "39154\n",
      "Movie: 39154 [] -> [858.0] = 1.6179851826620115%\n",
      "[858.0] -> [] = 100.0%\n",
      "39155\n",
      "Movie: 39155 [] -> [103.0] = 1.6094694711743167%\n",
      "[103.0] -> [] = 100.0%\n",
      "39156\n",
      "Movie: 39156 Association rules are\n",
      "[] -> [480.0] = 1.7797837009282125%\n",
      "[480.0] -> [] = 100.0%\n",
      "39157\n",
      "Movie: 39157 [] -> [1270.0] = 1.8393936813420761%\n",
      "[1270.0] -> [] = 100.0%\n",
      "39158\n",
      "Movie: 39158 [] -> [1265.0] = 1.7286894320020438%\n",
      "[1265.0] -> [] = 100.0%\n",
      "39159\n",
      "Movie: 39159 [] -> [1197.0] = 1.6690794515881802%\n",
      "[1197.0] -> [] = 100.0%\n",
      "39160\n",
      "Movie: 39160 [] -> [260.0] = 2.11189644894831%\n",
      "[260.0] -> [] = 100.0%\n",
      "39161\n",
      "Movie: 39161 [] -> [527.0] = 1.796815123903602%\n",
      "[527.0] -> [] = 100.0%\n",
      "39162\n",
      "Movie: 39162 [] -> [2028.0] = 1.933066507706719%\n",
      "[2028.0] -> [] = 100.0%\n",
      "39163\n",
      "Movie: 39163 [] -> [858.0] = 1.6179851826620115%\n",
      "[858.0] -> [] = 100.0%\n",
      "39164\n",
      "Movie: 39164 [] -> [103.0] = 1.6094694711743167%\n",
      "[103.0] -> [] = 100.0%\n",
      "39165\n",
      "Movie: 39165 Association rules are\n",
      "[] -> [480.0] = 1.7797837009282125%\n",
      "[480.0] -> [] = 100.0%\n",
      "39166\n",
      "Movie: 39166 [] -> [1270.0] = 1.8393936813420761%\n",
      "[1270.0] -> [] = 100.0%\n",
      "39167\n",
      "Movie: 39167 [] -> [1265.0] = 1.7286894320020438%\n",
      "[1265.0] -> [] = 100.0%\n",
      "39168\n",
      "Movie: 39168 [] -> [1197.0] = 1.6690794515881802%\n",
      "[1197.0] -> [] = 100.0%\n",
      "39169\n",
      "Movie: 39169 [] -> [260.0] = 2.11189644894831%\n",
      "[260.0] -> [] = 100.0%\n",
      "39170\n",
      "Movie: 39170 [] -> [527.0] = 1.796815123903602%\n",
      "[527.0] -> [] = 100.0%\n",
      "39171\n",
      "Movie: 39171 [] -> [2028.0] = 1.933066507706719%\n",
      "[2028.0] -> [] = 100.0%\n",
      "39172\n",
      "Movie: 39172 [] -> [858.0] = 1.6179851826620115%\n",
      "[858.0] -> [] = 100.0%\n",
      "39173\n",
      "Movie: 39173 [] -> [103.0] = 1.6094694711743167%\n",
      "[103.0] -> [] = 100.0%\n",
      "39174\n",
      "Movie: 39174 Association rules are\n",
      "[] -> [480.0] = 1.7797837009282125%\n",
      "[480.0] -> [] = 100.0%\n",
      "39175\n",
      "Movie: 39175 [] -> [1270.0] = 1.8393936813420761%\n",
      "[1270.0] -> [] = 100.0%\n",
      "39176\n",
      "Movie: 39176 [] -> [1265.0] = 1.7286894320020438%\n",
      "[1265.0] -> [] = 100.0%\n",
      "39177\n",
      "Movie: 39177 [] -> [1197.0] = 1.6690794515881802%\n",
      "[1197.0] -> [] = 100.0%\n",
      "39178\n",
      "Movie: 39178 [] -> [260.0] = 2.11189644894831%\n",
      "[260.0] -> [] = 100.0%\n",
      "39179\n",
      "Movie: 39179 [] -> [527.0] = 1.796815123903602%\n",
      "[527.0] -> [] = 100.0%\n",
      "39180\n",
      "Movie: 39180 [] -> [2028.0] = 1.933066507706719%\n",
      "[2028.0] -> [] = 100.0%\n",
      "39181\n",
      "Movie: 39181 [] -> [858.0] = 1.6179851826620115%\n",
      "[858.0] -> [] = 100.0%\n",
      "39182\n",
      "Movie: 39182 [] -> [103.0] = 1.6094694711743167%\n",
      "[103.0] -> [] = 100.0%\n",
      "39183\n",
      "Movie: 39183 Association rules are\n",
      "[] -> [480.0] = 1.7797837009282125%\n",
      "[480.0] -> [] = 100.0%\n",
      "39184\n",
      "Movie: 39184 [] -> [1270.0] = 1.8393936813420761%\n",
      "[1270.0] -> [] = 100.0%\n",
      "39185\n",
      "Movie: 39185 [] -> [1265.0] = 1.7286894320020438%\n",
      "[1265.0] -> [] = 100.0%\n",
      "39186\n",
      "Movie: 39186 [] -> [1197.0] = 1.6690794515881802%\n",
      "[1197.0] -> [] = 100.0%\n",
      "39187\n",
      "Movie: 39187 [] -> [260.0] = 2.11189644894831%\n",
      "[260.0] -> [] = 100.0%\n",
      "39188\n",
      "Movie: 39188 [] -> [527.0] = 1.796815123903602%\n",
      "[527.0] -> [] = 100.0%\n",
      "39189\n",
      "Movie: 39189 [] -> [2028.0] = 1.933066507706719%\n",
      "[2028.0] -> [] = 100.0%\n",
      "39190\n",
      "Movie: 39190 [] -> [858.0] = 1.6179851826620115%\n",
      "[858.0] -> [] = 100.0%\n",
      "39191\n",
      "Movie: 39191 [] -> [103.0] = 1.6094694711743167%\n",
      "[103.0] -> [] = 100.0%\n",
      "39192\n",
      "Movie: 39192 Association rules are\n",
      "[] -> [480.0] = 1.7797837009282125%\n",
      "[480.0] -> [] = 100.0%\n",
      "39193\n",
      "Movie: 39193 [] -> [1270.0] = 1.8393936813420761%\n",
      "[1270.0] -> [] = 100.0%\n",
      "39194\n",
      "Movie: 39194 [] -> [1265.0] = 1.7286894320020438%\n",
      "[1265.0] -> [] = 100.0%\n",
      "39195\n",
      "Movie: 39195 [] -> [1197.0] = 1.6690794515881802%\n",
      "[1197.0] -> [] = 100.0%\n",
      "39196\n",
      "Movie: 39196 [] -> [260.0] = 2.11189644894831%\n",
      "[260.0] -> [] = 100.0%\n",
      "39197\n",
      "Movie: 39197 [] -> [527.0] = 1.796815123903602%\n",
      "[527.0] -> [] = 100.0%\n",
      "39198\n",
      "Movie: 39198 [] -> [2028.0] = 1.933066507706719%\n",
      "[2028.0] -> [] = 100.0%\n",
      "39199\n",
      "Movie: 39199 [] -> [858.0] = 1.6179851826620115%\n",
      "[858.0] -> [] = 100.0%\n",
      "39200\n",
      "Movie: 39200 [] -> [103.0] = 1.6094694711743167%\n",
      "[103.0] -> [] = 100.0%\n",
      "39201\n",
      "Movie: 39201 Association rules are\n",
      "[] -> [480.0] = 1.7797837009282125%\n",
      "[480.0] -> [] = 100.0%\n",
      "39202\n",
      "Movie: 39202 [] -> [1270.0] = 1.8393936813420761%\n",
      "[1270.0] -> [] = 100.0%\n",
      "39203\n",
      "Movie: 39203 [] -> [1265.0] = 1.7286894320020438%\n",
      "[1265.0] -> [] = 100.0%\n",
      "39204\n",
      "Movie: 39204 [] -> [1197.0] = 1.6690794515881802%\n",
      "[1197.0] -> [] = 100.0%\n",
      "39205\n",
      "Movie: 39205 [] -> [260.0] = 2.11189644894831%\n",
      "[260.0] -> [] = 100.0%\n",
      "39206\n",
      "Movie: 39206 [] -> [527.0] = 1.796815123903602%\n",
      "[527.0] -> [] = 100.0%\n",
      "39207\n",
      "Movie: 39207 [] -> [2028.0] = 1.933066507706719%\n",
      "[2028.0] -> [] = 100.0%\n",
      "39208\n",
      "Movie: 39208 [] -> [858.0] = 1.6179851826620115%\n",
      "[858.0] -> [] = 100.0%\n",
      "39209\n",
      "Movie: 39209 [] -> [103.0] = 1.6094694711743167%\n",
      "[103.0] -> [] = 100.0%\n",
      "39210\n",
      "Movie: 39210 Association rules are\n",
      "[] -> [480.0] = 1.7797837009282125%\n",
      "[480.0] -> [] = 100.0%\n",
      "39211\n",
      "Movie: 39211 [] -> [1270.0] = 1.8393936813420761%\n",
      "[1270.0] -> [] = 100.0%\n",
      "39212\n",
      "Movie: 39212 [] -> [1265.0] = 1.7286894320020438%\n",
      "[1265.0] -> [] = 100.0%\n",
      "39213\n",
      "Movie: 39213 [] -> [1197.0] = 1.6690794515881802%\n",
      "[1197.0] -> [] = 100.0%\n",
      "39214\n",
      "Movie: 39214 [] -> [260.0] = 2.11189644894831%\n",
      "[260.0] -> [] = 100.0%\n",
      "39215\n",
      "Movie: 39215 [] -> [527.0] = 1.796815123903602%\n",
      "[527.0] -> [] = 100.0%\n",
      "39216\n",
      "Movie: 39216 [] -> [2028.0] = 1.933066507706719%\n",
      "[2028.0] -> [] = 100.0%\n",
      "39217\n",
      "Movie: 39217 [] -> [858.0] = 1.6179851826620115%\n",
      "[858.0] -> [] = 100.0%\n",
      "39218\n",
      "Movie: 39218 [] -> [103.0] = 1.6094694711743167%\n",
      "[103.0] -> [] = 100.0%\n",
      "39219\n",
      "Movie: 39219 "
     ]
    }
   ],
   "source": [
    "# Write your code to print out the rules\n",
    "\n",
    "print(\"Association rules are\")\n",
    "from itertools import combinations\n",
    "for l in pl:\n",
    "    c = [frozenset(q) for q in combinations(l,len(l)-1)]\n",
    "    mmax = 0\n",
    "    for a in c:\n",
    "        b = l-a\n",
    "        ab = l\n",
    "        sab = 0\n",
    "        sa = 0\n",
    "        sb = 0\n",
    "        for q in user_movie_data:\n",
    "            temp = set(q)\n",
    "            if(a.issubset(temp)):\n",
    "                sa+=1\n",
    "            if(b.issubset(temp)):\n",
    "                sb+=1\n",
    "            if(ab.issubset(temp)):\n",
    "                sab+=1\n",
    "        temp = sab/sa*100\n",
    "        if(temp > mmax):\n",
    "            mmax = temp+1\n",
    "        temp = sab/sb*100\n",
    "        if(temp > mmax):\n",
    "            mmax = temp+1\n",
    "            print(str(list(a))+\" -> \"+str(list(b))+\" = \"+str(sab/sa*100)+\"%\")\n",
    "            print(str(list(b))+\" -> \"+str(list(a))+\" = \"+str(sab/sb*100)+\"%\")\n",
    "            curr = curr + 1\n",
    "            print(curr)\n",
    "            print(\"Movie:\",curr, end=' ')\n",
    "    for a in c:\n",
    "        b = l-a\n",
    "        ab = l\n",
    "        sab = 0\n",
    "        sa = 0\n",
    "        sb = 0\n",
    "        for q in user_movie_data:\n",
    "            temp = set(q)\n",
    "            if(a.issubset(temp)):\n",
    "                sa+=1\n",
    "            if(b.issubset(temp)):\n",
    "                sb+=1\n",
    "            if(ab.issubset(temp)):\n",
    "                sab+=1\n",
    "            temp = sab/sa*100\n",
    "            if(temp == mmax):\n",
    "                print(curr, end = ' ')\n",
    "                curr += 1\n",
    "                temp = sab/sb*100\n",
    "\n",
    "            if(temp == mmax):\n",
    "                print(curr, end = ' ')\n",
    "                curr += 1\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "                print(curr)\n",
    "                print()\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 383,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1276,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  },
  "vscode": {
   "interpreter": {
    "hash": "e2451a2dcc749bd1b29099ac9cc55c0e1d4be68beb4115b76ff94dc9632ff01e"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}